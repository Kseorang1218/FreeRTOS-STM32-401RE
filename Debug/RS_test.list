
RS_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e8  080048e8  0000601c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f0  080048f0  0000601c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048f4  080048f4  000058f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080048f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013594  2000001c  08004914  0000601c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200135b0  08004914  000065b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf14  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b4  00000000  00000000  00012f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00015218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c8  00000000  00000000  00015d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145a7  00000000  00000000  00016658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7e6  00000000  00000000  0002abff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c8f5  00000000  00000000  000383e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4cda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  000c4d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c7b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000001c 	.word	0x2000001c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004860 	.word	0x08004860

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000020 	.word	0x20000020
 80001dc:	08004860 	.word	0x08004860

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8000528:	f001 fb04 	bl	8001b34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800052c:	4b40      	ldr	r3, [pc, #256]	@ (8000630 <pvPortMalloc+0x114>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d104      	bne.n	800053e <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8000534:	f000 f8c0 	bl	80006b8 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8000538:	4b3d      	ldr	r3, [pc, #244]	@ (8000630 <pvPortMalloc+0x114>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d00e      	beq.n	8000562 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000544:	2308      	movs	r3, #8
 8000546:	461a      	mov	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f003 0307 	and.w	r3, r3, #7
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f023 0307 	bic.w	r3, r3, #7
 800055e:	3308      	adds	r3, #8
 8000560:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d056      	beq.n	8000616 <pvPortMalloc+0xfa>
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a32      	ldr	r2, [pc, #200]	@ (8000634 <pvPortMalloc+0x118>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d852      	bhi.n	8000616 <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8000570:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <pvPortMalloc+0x11c>)
 8000572:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8000574:	4b30      	ldr	r3, [pc, #192]	@ (8000638 <pvPortMalloc+0x11c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800057a:	e004      	b.n	8000586 <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	429a      	cmp	r2, r3
 800058e:	d903      	bls.n	8000598 <pvPortMalloc+0x7c>
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f1      	bne.n	800057c <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	4a28      	ldr	r2, [pc, #160]	@ (800063c <pvPortMalloc+0x120>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d03a      	beq.n	8000616 <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80005a0:	69bb      	ldr	r3, [r7, #24]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2208      	movs	r2, #8
 80005a6:	4413      	add	r3, r2
 80005a8:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	685a      	ldr	r2, [r3, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	2208      	movs	r2, #8
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	4293      	cmp	r3, r2
 80005c0:	d922      	bls.n	8000608 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80005c2:	69fa      	ldr	r2, [r7, #28]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <pvPortMalloc+0x11c>)
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	e002      	b.n	80005ee <pvPortMalloc+0xd2>
 80005e8:	693b      	ldr	r3, [r7, #16]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d8f6      	bhi.n	80005e8 <pvPortMalloc+0xcc>
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <pvPortMalloc+0x124>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <pvPortMalloc+0x124>)
 8000614:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000616:	f001 fa9b 	bl	8001b50 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <pvPortMalloc+0x108>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000620:	f002 fb0c 	bl	8002c3c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000624:	697b      	ldr	r3, [r7, #20]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20012c48 	.word	0x20012c48
 8000634:	00012bf7 	.word	0x00012bf7
 8000638:	20012c38 	.word	0x20012c38
 800063c:	20012c40 	.word	0x20012c40
 8000640:	20000000 	.word	0x20000000

08000644 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d027      	beq.n	80006a6 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8000656:	2308      	movs	r3, #8
 8000658:	425b      	negs	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4413      	add	r3, r2
 800065e:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8000660:	693b      	ldr	r3, [r7, #16]
 8000662:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8000664:	f001 fa66 	bl	8001b34 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	685b      	ldr	r3, [r3, #4]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <vPortFree+0x6c>)
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e002      	b.n	800067a <vPortFree+0x36>
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	429a      	cmp	r2, r3
 8000684:	d8f6      	bhi.n	8000674 <vPortFree+0x30>
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <vPortFree+0x70>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	@ (80006b4 <vPortFree+0x70>)
 80006a0:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80006a2:	f001 fa55 	bl	8001b50 <xTaskResumeAll>
	}
}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20012c38 	.word	0x20012c38
 80006b4:	20000000 	.word	0x20000000

080006b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <prvHeapInit+0x44>)
 80006c0:	f023 0307 	bic.w	r3, r3, #7
 80006c4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80006c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <prvHeapInit+0x48>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <prvHeapInit+0x48>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <prvHeapInit+0x4c>)
 80006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <prvHeapInit+0x50>)
 80006d6:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <prvHeapInit+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	4a08      	ldr	r2, [pc, #32]	@ (8000708 <prvHeapInit+0x50>)
 80006e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	4a06      	ldr	r2, [pc, #24]	@ (8000704 <prvHeapInit+0x4c>)
 80006ec:	601a      	str	r2, [r3, #0]
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000040 	.word	0x20000040
 8000700:	20012c38 	.word	0x20012c38
 8000704:	20012c40 	.word	0x20012c40
 8000708:	00012bf8 	.word	0x00012bf8

0800070c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f103 0208 	add.w	r2, r3, #8
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 0208 	add.w	r2, r3, #8
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f103 0208 	add.w	r2, r3, #8
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	689a      	ldr	r2, [r3, #8]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80007ae:	b480      	push	{r7}
 80007b0:	b085      	sub	sp, #20
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c4:	d103      	bne.n	80007ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e00c      	b.n	80007e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3308      	adds	r3, #8
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e002      	b.n	80007dc <vListInsert+0x2e>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d2f6      	bcs.n	80007d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	685a      	ldr	r2, [r3, #4]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	691b      	ldr	r3, [r3, #16]
 800082c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	6892      	ldr	r2, [r2, #8]
 8000836:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	d103      	bne.n	8000854 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	1e5a      	subs	r2, r3, #1
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	3b04      	subs	r3, #4
 8000884:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800088c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3b04      	subs	r3, #4
 8000892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	f023 0201 	bic.w	r2, r3, #1
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3b04      	subs	r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <pxPortInitialiseStack+0x64>)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3b14      	subs	r3, #20
 80008ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	3b04      	subs	r3, #4
 80008ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f06f 0202 	mvn.w	r2, #2
 80008c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3b20      	subs	r3, #32
 80008c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	080008dd 	.word	0x080008dd

080008dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <prvTaskExitError+0x40>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ea:	d00b      	beq.n	8000904 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008f0:	f383 8811 	msr	BASEPRI, r3
 80008f4:	f3bf 8f6f 	isb	sy
 80008f8:	f3bf 8f4f 	dsb	sy
 80008fc:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <prvTaskExitError+0x24>
	__asm volatile
 8000904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000908:	f383 8811 	msr	BASEPRI, r3
 800090c:	f3bf 8f6f 	isb	sy
 8000910:	f3bf 8f4f 	dsb	sy
 8000914:	603b      	str	r3, [r7, #0]
}
 8000916:	bf00      	nop
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <prvTaskExitError+0x3c>
 800091c:	20000004 	.word	0x20000004

08000920 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <pxCurrentTCBConst2>)
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	6808      	ldr	r0, [r1, #0]
 8000926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092a:	f380 8809 	msr	PSP, r0
 800092e:	f3bf 8f6f 	isb	sy
 8000932:	f04f 0000 	mov.w	r0, #0
 8000936:	f380 8811 	msr	BASEPRI, r0
 800093a:	4770      	bx	lr
 800093c:	f3af 8000 	nop.w

08000940 <pxCurrentTCBConst2>:
 8000940:	20012c94 	.word	0x20012c94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop

08000948 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000948:	4806      	ldr	r0, [pc, #24]	@ (8000964 <prvPortStartFirstTask+0x1c>)
 800094a:	6800      	ldr	r0, [r0, #0]
 800094c:	6800      	ldr	r0, [r0, #0]
 800094e:	f380 8808 	msr	MSP, r0
 8000952:	b662      	cpsie	i
 8000954:	b661      	cpsie	f
 8000956:	f3bf 8f4f 	dsb	sy
 800095a:	f3bf 8f6f 	isb	sy
 800095e:	df00      	svc	0
 8000960:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000962:	bf00      	nop
 8000964:	e000ed08 	.word	0xe000ed08

08000968 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800096e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a64 <xPortStartScheduler+0xfc>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a3d      	ldr	r2, [pc, #244]	@ (8000a68 <xPortStartScheduler+0x100>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d10b      	bne.n	8000990 <xPortStartScheduler+0x28>
	__asm volatile
 8000978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800097c:	f383 8811 	msr	BASEPRI, r3
 8000980:	f3bf 8f6f 	isb	sy
 8000984:	f3bf 8f4f 	dsb	sy
 8000988:	60fb      	str	r3, [r7, #12]
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000990:	4b34      	ldr	r3, [pc, #208]	@ (8000a64 <xPortStartScheduler+0xfc>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a35      	ldr	r2, [pc, #212]	@ (8000a6c <xPortStartScheduler+0x104>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10b      	bne.n	80009b2 <xPortStartScheduler+0x4a>
	__asm volatile
 800099a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800099e:	f383 8811 	msr	BASEPRI, r3
 80009a2:	f3bf 8f6f 	isb	sy
 80009a6:	f3bf 8f4f 	dsb	sy
 80009aa:	613b      	str	r3, [r7, #16]
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	e7fd      	b.n	80009ae <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80009b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a70 <xPortStartScheduler+0x108>)
 80009b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	22ff      	movs	r2, #255	@ 0xff
 80009c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <xPortStartScheduler+0x10c>)
 80009d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80009da:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <xPortStartScheduler+0x110>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80009e0:	e009      	b.n	80009f6 <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <xPortStartScheduler+0x110>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a23      	ldr	r2, [pc, #140]	@ (8000a78 <xPortStartScheduler+0x110>)
 80009ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fe:	2b80      	cmp	r3, #128	@ 0x80
 8000a00:	d0ef      	beq.n	80009e2 <xPortStartScheduler+0x7a>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000a02:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <xPortStartScheduler+0x110>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <xPortStartScheduler+0x110>)
 8000a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <xPortStartScheduler+0x110>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8000a14:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <xPortStartScheduler+0x110>)
 8000a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <xPortStartScheduler+0x114>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a15      	ldr	r2, [pc, #84]	@ (8000a7c <xPortStartScheduler+0x114>)
 8000a26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <xPortStartScheduler+0x114>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <xPortStartScheduler+0x114>)
 8000a32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8000a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000a38:	f000 f8d8 	bl	8000bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <xPortStartScheduler+0x118>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000a42:	f000 f8ef 	bl	8000c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <xPortStartScheduler+0x11c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a84 <xPortStartScheduler+0x11c>)
 8000a4c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8000a50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000a52:	f7ff ff79 	bl	8000948 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000a56:	f7ff ff41 	bl	80008dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	410fc271 	.word	0x410fc271
 8000a6c:	410fc270 	.word	0x410fc270
 8000a70:	e000e400 	.word	0xe000e400
 8000a74:	20012c4c 	.word	0x20012c4c
 8000a78:	20012c50 	.word	0x20012c50
 8000a7c:	e000ed20 	.word	0xe000ed20
 8000a80:	20000004 	.word	0x20000004
 8000a84:	e000ef34 	.word	0xe000ef34

08000a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8000a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a92:	f383 8811 	msr	BASEPRI, r3
 8000a96:	f3bf 8f6f 	isb	sy
 8000a9a:	f3bf 8f4f 	dsb	sy
 8000a9e:	607b      	str	r3, [r7, #4]
}
 8000aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <vPortEnterCritical+0x5c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <vPortEnterCritical+0x5c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <vPortEnterCritical+0x5c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d110      	bne.n	8000ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <vPortEnterCritical+0x60>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d00b      	beq.n	8000ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8000abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ac2:	f383 8811 	msr	BASEPRI, r3
 8000ac6:	f3bf 8f6f 	isb	sy
 8000aca:	f3bf 8f4f 	dsb	sy
 8000ace:	603b      	str	r3, [r7, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	e7fd      	b.n	8000ad2 <vPortEnterCritical+0x4a>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000004 	.word	0x20000004
 8000ae8:	e000ed04 	.word	0xe000ed04

08000aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <vPortExitCritical+0x50>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10b      	bne.n	8000b12 <vPortExitCritical+0x26>
	__asm volatile
 8000afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000afe:	f383 8811 	msr	BASEPRI, r3
 8000b02:	f3bf 8f6f 	isb	sy
 8000b06:	f3bf 8f4f 	dsb	sy
 8000b0a:	607b      	str	r3, [r7, #4]
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	e7fd      	b.n	8000b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <vPortExitCritical+0x50>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <vPortExitCritical+0x50>)
 8000b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <vPortExitCritical+0x50>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d105      	bne.n	8000b30 <vPortExitCritical+0x44>
 8000b24:	2300      	movs	r3, #0
 8000b26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue )
	);
}
 8000b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	20000004 	.word	0x20000004

08000b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000b40:	f3ef 8009 	mrs	r0, PSP
 8000b44:	f3bf 8f6f 	isb	sy
 8000b48:	4b15      	ldr	r3, [pc, #84]	@ (8000ba0 <pxCurrentTCBConst>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	f01e 0f10 	tst.w	lr, #16
 8000b50:	bf08      	it	eq
 8000b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5a:	6010      	str	r0, [r2, #0]
 8000b5c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8000b64:	f380 8811 	msr	BASEPRI, r0
 8000b68:	f3bf 8f4f 	dsb	sy
 8000b6c:	f3bf 8f6f 	isb	sy
 8000b70:	f001 f95e 	bl	8001e30 <vTaskSwitchContext>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	f380 8811 	msr	BASEPRI, r0
 8000b7c:	bc08      	pop	{r3}
 8000b7e:	6819      	ldr	r1, [r3, #0]
 8000b80:	6808      	ldr	r0, [r1, #0]
 8000b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b86:	f01e 0f10 	tst.w	lr, #16
 8000b8a:	bf08      	it	eq
 8000b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000b90:	f380 8809 	msr	PSP, r0
 8000b94:	f3bf 8f6f 	isb	sy
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	f3af 8000 	nop.w

08000ba0 <pxCurrentTCBConst>:
 8000ba0:	20012c94 	.word	0x20012c94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop

08000ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	__asm volatile
 8000bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bb2:	f383 8811 	msr	BASEPRI, r3
 8000bb6:	f3bf 8f6f 	isb	sy
 8000bba:	f3bf 8f4f 	dsb	sy
 8000bbe:	607b      	str	r3, [r7, #4]
}
 8000bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000bc2:	f001 f873 	bl	8001cac <xTaskIncrementTick>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SysTick_Handler+0x40>)
 8000bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f383 8811 	msr	BASEPRI, r3
}
 8000bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	e000ed04 	.word	0xe000ed04

08000bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <vPortSetupTimerInterrupt+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <vPortSetupTimerInterrupt+0x2c>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	099b      	lsrs	r3, r3, #6
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <vPortSetupTimerInterrupt+0x30>)
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000c02:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <vPortSetupTimerInterrupt+0x34>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000010 	.word	0x20000010
 8000c18:	10624dd3 	.word	0x10624dd3
 8000c1c:	e000e014 	.word	0xe000e014
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000c24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8000c34 <vPortEnableVFP+0x10>
 8000c28:	6801      	ldr	r1, [r0, #0]
 8000c2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000c2e:	6001      	str	r1, [r0, #0]
 8000c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000c32:	bf00      	nop
 8000c34:	e000ed88 	.word	0xe000ed88

08000c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000c3e:	f3ef 8305 	mrs	r3, IPSR
 8000c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d915      	bls.n	8000c76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <vPortValidateInterruptPriority+0x74>)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <vPortValidateInterruptPriority+0x78>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	7afa      	ldrb	r2, [r7, #11]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d20b      	bcs.n	8000c76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8000c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c62:	f383 8811 	msr	BASEPRI, r3
 8000c66:	f3bf 8f6f 	isb	sy
 8000c6a:	f3bf 8f4f 	dsb	sy
 8000c6e:	607b      	str	r3, [r7, #4]
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	e7fd      	b.n	8000c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <vPortValidateInterruptPriority+0x7c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <vPortValidateInterruptPriority+0x80>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d90b      	bls.n	8000c9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8000c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	603b      	str	r3, [r7, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	e7fd      	b.n	8000c9a <vPortValidateInterruptPriority+0x62>
	}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e3f0 	.word	0xe000e3f0
 8000cb0:	20012c4c 	.word	0x20012c4c
 8000cb4:	e000ed0c 	.word	0xe000ed0c
 8000cb8:	20012c50 	.word	0x20012c50

08000cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d10b      	bne.n	8000ce8 <xQueueGenericReset+0x2c>
	__asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	60bb      	str	r3, [r7, #8]
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000ce8:	f7ff fece 	bl	8000a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000cf4:	68f9      	ldr	r1, [r7, #12]
 8000cf6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000cf8:	fb01 f303 	mul.w	r3, r1, r3
 8000cfc:	441a      	add	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	441a      	add	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	22ff      	movs	r2, #255	@ 0xff
 8000d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	22ff      	movs	r2, #255	@ 0xff
 8000d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d114      	bne.n	8000d68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d01a      	beq.n	8000d7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3310      	adds	r3, #16
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 f944 	bl	8001fd8 <xTaskRemoveFromEventList>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d012      	beq.n	8000d7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000d56:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <xQueueGenericReset+0xd0>)
 8000d58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	f3bf 8f6f 	isb	sy
 8000d66:	e009      	b.n	8000d7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3310      	adds	r3, #16
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fccd 	bl	800070c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	3324      	adds	r3, #36	@ 0x24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fcc8 	bl	800070c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000d7c:	f7ff feb6 	bl	8000aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000ed04 	.word	0xe000ed04

08000d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10b      	bne.n	8000dbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8000da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	f3bf 8f6f 	isb	sy
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10b      	bne.n	8000dda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	e7fd      	b.n	8000dd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <xQueueGenericCreateStatic+0x56>
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <xQueueGenericCreateStatic+0x5a>
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <xQueueGenericCreateStatic+0x5c>
 8000dea:	2300      	movs	r3, #0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10b      	bne.n	8000e08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8000df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000df4:	f383 8811 	msr	BASEPRI, r3
 8000df8:	f3bf 8f6f 	isb	sy
 8000dfc:	f3bf 8f4f 	dsb	sy
 8000e00:	623b      	str	r3, [r7, #32]
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d102      	bne.n	8000e14 <xQueueGenericCreateStatic+0x84>
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d101      	bne.n	8000e18 <xQueueGenericCreateStatic+0x88>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <xQueueGenericCreateStatic+0x8a>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d10b      	bne.n	8000e36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8000e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	61fb      	str	r3, [r7, #28]
}
 8000e30:	bf00      	nop
 8000e32:	bf00      	nop
 8000e34:	e7fd      	b.n	8000e32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000e36:	2350      	movs	r3, #80	@ 0x50
 8000e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b50      	cmp	r3, #80	@ 0x50
 8000e3e:	d00b      	beq.n	8000e58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8000e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e44:	f383 8811 	msr	BASEPRI, r3
 8000e48:	f3bf 8f6f 	isb	sy
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	61bb      	str	r3, [r7, #24]
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000e58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00d      	beq.n	8000e80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e66:	2201      	movs	r2, #1
 8000e68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000e6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8000e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4613      	mov	r3, r2
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	68b9      	ldr	r1, [r7, #8]
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f000 f805 	bl	8000e8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3730      	adds	r7, #48	@ 0x30
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b084      	sub	sp, #16
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e002      	b.n	8000eac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000eb8:	2101      	movs	r1, #1
 8000eba:	69b8      	ldr	r0, [r7, #24]
 8000ebc:	f7ff fefe 	bl	8000cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	@ 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d10b      	bne.n	8000f04 <xQueueGenericSend+0x34>
	__asm volatile
 8000eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ef0:	f383 8811 	msr	BASEPRI, r3
 8000ef4:	f3bf 8f6f 	isb	sy
 8000ef8:	f3bf 8f4f 	dsb	sy
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d103      	bne.n	8000f12 <xQueueGenericSend+0x42>
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d101      	bne.n	8000f16 <xQueueGenericSend+0x46>
 8000f12:	2301      	movs	r3, #1
 8000f14:	e000      	b.n	8000f18 <xQueueGenericSend+0x48>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10b      	bne.n	8000f34 <xQueueGenericSend+0x64>
	__asm volatile
 8000f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d103      	bne.n	8000f42 <xQueueGenericSend+0x72>
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <xQueueGenericSend+0x76>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <xQueueGenericSend+0x78>
 8000f46:	2300      	movs	r3, #0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10b      	bne.n	8000f64 <xQueueGenericSend+0x94>
	__asm volatile
 8000f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f50:	f383 8811 	msr	BASEPRI, r3
 8000f54:	f3bf 8f6f 	isb	sy
 8000f58:	f3bf 8f4f 	dsb	sy
 8000f5c:	623b      	str	r3, [r7, #32]
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000f64:	f001 f9fa 	bl	800235c <xTaskGetSchedulerState>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d102      	bne.n	8000f74 <xQueueGenericSend+0xa4>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <xQueueGenericSend+0xa8>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <xQueueGenericSend+0xaa>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10b      	bne.n	8000f96 <xQueueGenericSend+0xc6>
	__asm volatile
 8000f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	61fb      	str	r3, [r7, #28]
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	e7fd      	b.n	8000f92 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000f96:	f7ff fd77 	bl	8000a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d302      	bcc.n	8000fac <xQueueGenericSend+0xdc>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d129      	bne.n	8001000 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000fb2:	f000 fa0f 	bl	80013d4 <prvCopyDataToQueue>
 8000fb6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d010      	beq.n	8000fe2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fc2:	3324      	adds	r3, #36	@ 0x24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 f807 	bl	8001fd8 <xTaskRemoveFromEventList>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	@ (80010d0 <xQueueGenericSend+0x200>)
 8000fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	f3bf 8f4f 	dsb	sy
 8000fdc:	f3bf 8f6f 	isb	sy
 8000fe0:	e00a      	b.n	8000ff8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000fe8:	4b39      	ldr	r3, [pc, #228]	@ (80010d0 <xQueueGenericSend+0x200>)
 8000fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000ff8:	f7ff fd78 	bl	8000aec <vPortExitCritical>
				return pdPASS;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e063      	b.n	80010c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001006:	f7ff fd71 	bl	8000aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800100a:	2300      	movs	r3, #0
 800100c:	e05c      	b.n	80010c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001010:	2b00      	cmp	r3, #0
 8001012:	d106      	bne.n	8001022 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f841 	bl	80020a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800101e:	2301      	movs	r3, #1
 8001020:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001022:	f7ff fd63 	bl	8000aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001026:	f000 fd85 	bl	8001b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800102a:	f7ff fd2d 	bl	8000a88 <vPortEnterCritical>
 800102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001030:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103a:	d103      	bne.n	8001044 <xQueueGenericSend+0x174>
 800103c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001046:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d103      	bne.n	800105a <xQueueGenericSend+0x18a>
 8001052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800105a:	f7ff fd47 	bl	8000aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800105e:	1d3a      	adds	r2, r7, #4
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f830 	bl	80020cc <xTaskCheckForTimeOut>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d124      	bne.n	80010bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001072:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001074:	f000 faa6 	bl	80015c4 <prvIsQueueFull>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d018      	beq.n	80010b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800107e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001080:	3310      	adds	r3, #16
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f000 ff54 	bl	8001f34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800108c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800108e:	f000 fa31 	bl	80014f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001092:	f000 fd5d 	bl	8001b50 <xTaskResumeAll>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	f47f af7c 	bne.w	8000f96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <xQueueGenericSend+0x200>)
 80010a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	f3bf 8f4f 	dsb	sy
 80010aa:	f3bf 8f6f 	isb	sy
 80010ae:	e772      	b.n	8000f96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80010b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010b2:	f000 fa1f 	bl	80014f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80010b6:	f000 fd4b 	bl	8001b50 <xTaskResumeAll>
 80010ba:	e76c      	b.n	8000f96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80010bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80010be:	f000 fa19 	bl	80014f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80010c2:	f000 fd45 	bl	8001b50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80010c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3738      	adds	r7, #56	@ 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	e000ed04 	.word	0xe000ed04

080010d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	@ 0x40
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80010e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10b      	bne.n	8001104 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80010ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f0:	f383 8811 	msr	BASEPRI, r3
 80010f4:	f3bf 8f6f 	isb	sy
 80010f8:	f3bf 8f4f 	dsb	sy
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80010fe:	bf00      	nop
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <xQueueGenericSendFromISR+0x3e>
 800110a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <xQueueGenericSendFromISR+0x42>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <xQueueGenericSendFromISR+0x44>
 8001116:	2300      	movs	r3, #0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10b      	bne.n	8001134 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800111c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001120:	f383 8811 	msr	BASEPRI, r3
 8001124:	f3bf 8f6f 	isb	sy
 8001128:	f3bf 8f4f 	dsb	sy
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b02      	cmp	r3, #2
 8001138:	d103      	bne.n	8001142 <xQueueGenericSendFromISR+0x6e>
 800113a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800113c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <xQueueGenericSendFromISR+0x72>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <xQueueGenericSendFromISR+0x74>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10b      	bne.n	8001164 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800114c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001150:	f383 8811 	msr	BASEPRI, r3
 8001154:	f3bf 8f6f 	isb	sy
 8001158:	f3bf 8f4f 	dsb	sy
 800115c:	623b      	str	r3, [r7, #32]
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001164:	f7ff fd68 	bl	8000c38 <vPortValidateInterruptPriority>
	__asm volatile
 8001168:	f3ef 8211 	mrs	r2, BASEPRI
 800116c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001170:	f383 8811 	msr	BASEPRI, r3
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	61fa      	str	r2, [r7, #28]
 800117e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001180:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800118a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800118c:	429a      	cmp	r2, r3
 800118e:	d302      	bcc.n	8001196 <xQueueGenericSendFromISR+0xc2>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d12f      	bne.n	80011f6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001198:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800119c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80011ac:	f000 f912 	bl	80013d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80011b0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b8:	d112      	bne.n	80011e0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80011ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d016      	beq.n	80011f0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011c4:	3324      	adds	r3, #36	@ 0x24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 ff06 	bl	8001fd8 <xTaskRemoveFromEventList>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00e      	beq.n	80011f0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00b      	beq.n	80011f0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e007      	b.n	80011f0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80011e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011e4:	3301      	adds	r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80011f0:	2301      	movs	r3, #1
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80011f4:	e001      	b.n	80011fa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fc:	617b      	str	r3, [r7, #20]
	__asm volatile
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f383 8811 	msr	BASEPRI, r3
}
 8001204:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001208:	4618      	mov	r0, r3
 800120a:	3740      	adds	r7, #64	@ 0x40
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10b      	bne.n	8001242 <xQueueReceive+0x32>
	__asm volatile
 800122a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800122e:	f383 8811 	msr	BASEPRI, r3
 8001232:	f3bf 8f6f 	isb	sy
 8001236:	f3bf 8f4f 	dsb	sy
 800123a:	623b      	str	r3, [r7, #32]
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	e7fd      	b.n	800123e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <xQueueReceive+0x40>
 8001248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d101      	bne.n	8001254 <xQueueReceive+0x44>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <xQueueReceive+0x46>
 8001254:	2300      	movs	r3, #0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10b      	bne.n	8001272 <xQueueReceive+0x62>
	__asm volatile
 800125a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800125e:	f383 8811 	msr	BASEPRI, r3
 8001262:	f3bf 8f6f 	isb	sy
 8001266:	f3bf 8f4f 	dsb	sy
 800126a:	61fb      	str	r3, [r7, #28]
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	e7fd      	b.n	800126e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001272:	f001 f873 	bl	800235c <xTaskGetSchedulerState>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <xQueueReceive+0x72>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <xQueueReceive+0x76>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <xQueueReceive+0x78>
 8001286:	2300      	movs	r3, #0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10b      	bne.n	80012a4 <xQueueReceive+0x94>
	__asm volatile
 800128c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001290:	f383 8811 	msr	BASEPRI, r3
 8001294:	f3bf 8f6f 	isb	sy
 8001298:	f3bf 8f4f 	dsb	sy
 800129c:	61bb      	str	r3, [r7, #24]
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80012a4:	f7ff fbf0 	bl	8000a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01f      	beq.n	80012f4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80012b8:	f000 f8f6 	bl	80014a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80012bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012be:	1e5a      	subs	r2, r3, #1
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00f      	beq.n	80012ec <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80012cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ce:	3310      	adds	r3, #16
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fe81 	bl	8001fd8 <xTaskRemoveFromEventList>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80012dc:	4b3c      	ldr	r3, [pc, #240]	@ (80013d0 <xQueueReceive+0x1c0>)
 80012de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	f3bf 8f4f 	dsb	sy
 80012e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80012ec:	f7ff fbfe 	bl	8000aec <vPortExitCritical>
				return pdPASS;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e069      	b.n	80013c8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d103      	bne.n	8001302 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80012fa:	f7ff fbf7 	bl	8000aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80012fe:	2300      	movs	r3, #0
 8001300:	e062      	b.n	80013c8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fec7 	bl	80020a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001312:	2301      	movs	r3, #1
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001316:	f7ff fbe9 	bl	8000aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800131a:	f000 fc0b 	bl	8001b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800131e:	f7ff fbb3 	bl	8000a88 <vPortEnterCritical>
 8001322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001324:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001328:	b25b      	sxtb	r3, r3
 800132a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132e:	d103      	bne.n	8001338 <xQueueReceive+0x128>
 8001330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800133e:	b25b      	sxtb	r3, r3
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d103      	bne.n	800134e <xQueueReceive+0x13e>
 8001346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800134e:	f7ff fbcd 	bl	8000aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001352:	1d3a      	adds	r2, r7, #4
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f000 feb6 	bl	80020cc <xTaskCheckForTimeOut>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d123      	bne.n	80013ae <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001366:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001368:	f000 f916 	bl	8001598 <prvIsQueueEmpty>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d017      	beq.n	80013a2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001374:	3324      	adds	r3, #36	@ 0x24
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fdda 	bl	8001f34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001382:	f000 f8b7 	bl	80014f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001386:	f000 fbe3 	bl	8001b50 <xTaskResumeAll>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d189      	bne.n	80012a4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <xQueueReceive+0x1c0>)
 8001392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f3bf 8f4f 	dsb	sy
 800139c:	f3bf 8f6f 	isb	sy
 80013a0:	e780      	b.n	80012a4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80013a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013a4:	f000 f8a6 	bl	80014f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80013a8:	f000 fbd2 	bl	8001b50 <xTaskResumeAll>
 80013ac:	e77a      	b.n	80012a4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80013ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013b0:	f000 f8a0 	bl	80014f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80013b4:	f000 fbcc 	bl	8001b50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80013b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80013ba:	f000 f8ed 	bl	8001598 <prvIsQueueEmpty>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f43f af6f 	beq.w	80012a4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80013c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3730      	adds	r7, #48	@ 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	e000ed04 	.word	0xe000ed04

080013d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d14d      	bne.n	8001496 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ffca 	bl	8002398 <xTaskPriorityDisinherit>
 8001404:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	e043      	b.n	8001496 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d119      	bne.n	8001448 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6858      	ldr	r0, [r3, #4]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	461a      	mov	r2, r3
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	f003 fa10 	bl	8004844 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	441a      	add	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	429a      	cmp	r2, r3
 800143c:	d32b      	bcc.n	8001496 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	e026      	b.n	8001496 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68d8      	ldr	r0, [r3, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	461a      	mov	r2, r3
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	f003 f9f6 	bl	8004844 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	425b      	negs	r3, r3
 8001462:	441a      	add	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	425b      	negs	r3, r3
 800147e:	441a      	add	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d105      	bne.n	8001496 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	3b01      	subs	r3, #1
 8001494:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800149e:	697b      	ldr	r3, [r7, #20]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d018      	beq.n	80014ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	441a      	add	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d303      	bcc.n	80014dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68d9      	ldr	r1, [r3, #12]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	461a      	mov	r2, r3
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f003 f9ac 	bl	8004844 <memcpy>
	}
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80014fc:	f7ff fac4 	bl	8000a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001506:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001508:	e011      	b.n	800152e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150e:	2b00      	cmp	r3, #0
 8001510:	d012      	beq.n	8001538 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3324      	adds	r3, #36	@ 0x24
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd5e 	bl	8001fd8 <xTaskRemoveFromEventList>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001522:	f000 fe37 	bl	8002194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3b01      	subs	r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dce9      	bgt.n	800150a <prvUnlockQueue+0x16>
 8001536:	e000      	b.n	800153a <prvUnlockQueue+0x46>
					break;
 8001538:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	22ff      	movs	r2, #255	@ 0xff
 800153e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001542:	f7ff fad3 	bl	8000aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001546:	f7ff fa9f 	bl	8000a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001550:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001552:	e011      	b.n	8001578 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3310      	adds	r3, #16
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fd39 	bl	8001fd8 <xTaskRemoveFromEventList>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800156c:	f000 fe12 	bl	8002194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001570:	7bbb      	ldrb	r3, [r7, #14]
 8001572:	3b01      	subs	r3, #1
 8001574:	b2db      	uxtb	r3, r3
 8001576:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dce9      	bgt.n	8001554 <prvUnlockQueue+0x60>
 8001580:	e000      	b.n	8001584 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001582:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	22ff      	movs	r2, #255	@ 0xff
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800158c:	f7ff faae 	bl	8000aec <vPortExitCritical>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015a0:	f7ff fa72 	bl	8000a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e001      	b.n	80015b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015b6:	f7ff fa99 	bl	8000aec <vPortExitCritical>

	return xReturn;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015cc:	f7ff fa5c 	bl	8000a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015d8:	429a      	cmp	r2, r3
 80015da:	d102      	bne.n	80015e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80015dc:	2301      	movs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e001      	b.n	80015e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80015e6:	f7ff fa81 	bl	8000aec <vPortExitCritical>

	return xReturn;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e014      	b.n	800162e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001604:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <vQueueAddToRegistry+0x50>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001610:	490c      	ldr	r1, [pc, #48]	@ (8001644 <vQueueAddToRegistry+0x50>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <vQueueAddToRegistry+0x50>)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001626:	e006      	b.n	8001636 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2b07      	cmp	r3, #7
 8001632:	d9e7      	bls.n	8001604 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20012c54 	.word	0x20012c54

08001648 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001658:	f7ff fa16 	bl	8000a88 <vPortEnterCritical>
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001662:	b25b      	sxtb	r3, r3
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d103      	bne.n	8001672 <vQueueWaitForMessageRestricted+0x2a>
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167e:	d103      	bne.n	8001688 <vQueueWaitForMessageRestricted+0x40>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001688:	f7ff fa30 	bl	8000aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001690:	2b00      	cmp	r3, #0
 8001692:	d106      	bne.n	80016a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3324      	adds	r3, #36	@ 0x24
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fc6f 	bl	8001f80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff26 	bl	80014f4 <prvUnlockQueue>
	}
 80016a8:	bf00      	nop
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	@ 0x38
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80016be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10b      	bne.n	80016dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80016c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016c8:	f383 8811 	msr	BASEPRI, r3
 80016cc:	f3bf 8f6f 	isb	sy
 80016d0:	f3bf 8f4f 	dsb	sy
 80016d4:	623b      	str	r3, [r7, #32]
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80016dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10b      	bne.n	80016fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80016e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e6:	f383 8811 	msr	BASEPRI, r3
 80016ea:	f3bf 8f6f 	isb	sy
 80016ee:	f3bf 8f4f 	dsb	sy
 80016f2:	61fb      	str	r3, [r7, #28]
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	e7fd      	b.n	80016f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80016fa:	2358      	movs	r3, #88	@ 0x58
 80016fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b58      	cmp	r3, #88	@ 0x58
 8001702:	d00b      	beq.n	800171c <xTaskCreateStatic+0x6c>
	__asm volatile
 8001704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001708:	f383 8811 	msr	BASEPRI, r3
 800170c:	f3bf 8f6f 	isb	sy
 8001710:	f3bf 8f4f 	dsb	sy
 8001714:	61bb      	str	r3, [r7, #24]
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800171c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800171e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01e      	beq.n	8001762 <xTaskCreateStatic+0xb2>
 8001724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01b      	beq.n	8001762 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800172a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001732:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001736:	2202      	movs	r2, #2
 8001738:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800173c:	2300      	movs	r3, #0
 800173e:	9303      	str	r3, [sp, #12]
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f850 	bl	80017fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800175a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800175c:	f000 f8de 	bl	800191c <prvAddNewTaskToReadyList>
 8001760:	e001      	b.n	8001766 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001766:	697b      	ldr	r3, [r7, #20]
	}
 8001768:	4618      	mov	r0, r3
 800176a:	3728      	adds	r7, #40	@ 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	@ 0x30
 8001774:	af04      	add	r7, sp, #16
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fec9 	bl	800051c <pvPortMalloc>
 800178a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001792:	2058      	movs	r0, #88	@ 0x58
 8001794:	f7fe fec2 	bl	800051c <pvPortMalloc>
 8001798:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017a6:	e005      	b.n	80017b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80017a8:	6978      	ldr	r0, [r7, #20]
 80017aa:	f7fe ff4b 	bl	8000644 <vPortFree>
 80017ae:	e001      	b.n	80017b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9303      	str	r3, [sp, #12]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f80e 	bl	80017fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80017de:	69f8      	ldr	r0, [r7, #28]
 80017e0:	f000 f89c 	bl	800191c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80017e4:	2301      	movs	r3, #1
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e002      	b.n	80017f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80017f0:	69bb      	ldr	r3, [r7, #24]
	}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3720      	adds	r7, #32
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b088      	sub	sp, #32
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800180a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	461a      	mov	r2, r3
 8001812:	21a5      	movs	r1, #165	@ 0xa5
 8001814:	f002 ffea 	bl	80047ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001822:	3b01      	subs	r3, #1
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f023 0307 	bic.w	r3, r3, #7
 8001830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800183c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001840:	f383 8811 	msr	BASEPRI, r3
 8001844:	f3bf 8f6f 	isb	sy
 8001848:	f3bf 8f4f 	dsb	sy
 800184c:	617b      	str	r3, [r7, #20]
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d01f      	beq.n	800189a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e012      	b.n	8001886 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	7819      	ldrb	r1, [r3, #0]
 8001868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	3334      	adds	r3, #52	@ 0x34
 8001870:	460a      	mov	r2, r1
 8001872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	2b09      	cmp	r3, #9
 800188a:	d9e9      	bls.n	8001860 <prvInitialiseNewTask+0x66>
 800188c:	e000      	b.n	8001890 <prvInitialiseNewTask+0x96>
			{
				break;
 800188e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001892:	2200      	movs	r2, #0
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001898:	e003      	b.n	80018a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800189a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d901      	bls.n	80018ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018a8:	2304      	movs	r3, #4
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80018ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018b6:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80018b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ba:	2200      	movs	r2, #0
 80018bc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	3304      	adds	r3, #4
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe ff42 	bl	800074c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ca:	3318      	adds	r3, #24
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe ff3d 	bl	800074c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018da:	f1c3 0205 	rsb	r2, r3, #5
 80018de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80018e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ea:	2200      	movs	r2, #0
 80018ec:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	69b8      	ldr	r0, [r7, #24]
 80018fc:	f7fe ffba 	bl	8000874 <pxPortInitialiseStack>
 8001900:	4602      	mov	r2, r0
 8001902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001904:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001924:	f7ff f8b0 	bl	8000a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001928:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <prvAddNewTaskToReadyList+0xc0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3301      	adds	r3, #1
 800192e:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <prvAddNewTaskToReadyList+0xc0>)
 8001930:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <prvAddNewTaskToReadyList+0xc4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800193a:	4a29      	ldr	r2, [pc, #164]	@ (80019e0 <prvAddNewTaskToReadyList+0xc4>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001940:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <prvAddNewTaskToReadyList+0xc0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d110      	bne.n	800196a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001948:	f000 fc4a 	bl	80021e0 <prvInitialiseTaskLists>
 800194c:	e00d      	b.n	800196a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800194e:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <prvAddNewTaskToReadyList+0xc8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <prvAddNewTaskToReadyList+0xc4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	429a      	cmp	r2, r3
 8001962:	d802      	bhi.n	800196a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <prvAddNewTaskToReadyList+0xc4>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800196a:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <prvAddNewTaskToReadyList+0xcc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	3301      	adds	r3, #1
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <prvAddNewTaskToReadyList+0xcc>)
 8001972:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <prvAddNewTaskToReadyList+0xcc>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001980:	2201      	movs	r2, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <prvAddNewTaskToReadyList+0xd0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	4a18      	ldr	r2, [pc, #96]	@ (80019ec <prvAddNewTaskToReadyList+0xd0>)
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <prvAddNewTaskToReadyList+0xd4>)
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3304      	adds	r3, #4
 80019a2:	4619      	mov	r1, r3
 80019a4:	4610      	mov	r0, r2
 80019a6:	f7fe fede 	bl	8000766 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80019aa:	f7ff f89f 	bl	8000aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <prvAddNewTaskToReadyList+0xc8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00e      	beq.n	80019d4 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <prvAddNewTaskToReadyList+0xc4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <prvAddNewTaskToReadyList+0xd8>)
 80019c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20012d6c 	.word	0x20012d6c
 80019e0:	20012c94 	.word	0x20012c94
 80019e4:	20012d78 	.word	0x20012d78
 80019e8:	20012d88 	.word	0x20012d88
 80019ec:	20012d74 	.word	0x20012d74
 80019f0:	20012c98 	.word	0x20012c98
 80019f4:	e000ed04 	.word	0xe000ed04

080019f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d018      	beq.n	8001a3c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001a0a:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <vTaskDelay+0x64>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <vTaskDelay+0x32>
	__asm volatile
 8001a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	f3bf 8f6f 	isb	sy
 8001a1e:	f3bf 8f4f 	dsb	sy
 8001a22:	60bb      	str	r3, [r7, #8]
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	e7fd      	b.n	8001a26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001a2a:	f000 f883 	bl	8001b34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fd39 	bl	80024a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001a36:	f000 f88b 	bl	8001b50 <xTaskResumeAll>
 8001a3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d107      	bne.n	8001a52 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <vTaskDelay+0x68>)
 8001a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	f3bf 8f4f 	dsb	sy
 8001a4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20012d94 	.word	0x20012d94
 8001a60:	e000ed04 	.word	0xe000ed04

08001a64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	@ 0x28
 8001a68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001a72:	463a      	mov	r2, r7
 8001a74:	1d39      	adds	r1, r7, #4
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 f8f8 	bl	8002c70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	9202      	str	r2, [sp, #8]
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	460a      	mov	r2, r1
 8001a92:	4922      	ldr	r1, [pc, #136]	@ (8001b1c <vTaskStartScheduler+0xb8>)
 8001a94:	4822      	ldr	r0, [pc, #136]	@ (8001b20 <vTaskStartScheduler+0xbc>)
 8001a96:	f7ff fe0b 	bl	80016b0 <xTaskCreateStatic>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <vTaskStartScheduler+0xc0>)
 8001a9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <vTaskStartScheduler+0xc0>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	e001      	b.n	8001ab2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001ab8:	f000 fd5c 	bl	8002574 <xTimerCreateTimerTask>
 8001abc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d116      	bne.n	8001af2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ac8:	f383 8811 	msr	BASEPRI, r3
 8001acc:	f3bf 8f6f 	isb	sy
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	613b      	str	r3, [r7, #16]
}
 8001ad6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <vTaskStartScheduler+0xc4>)
 8001ada:	f04f 32ff 	mov.w	r2, #4294967295
 8001ade:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ae0:	4b12      	ldr	r3, [pc, #72]	@ (8001b2c <vTaskStartScheduler+0xc8>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <vTaskStartScheduler+0xcc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001aec:	f7fe ff3c 	bl	8000968 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001af0:	e00f      	b.n	8001b12 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d10b      	bne.n	8001b12 <vTaskStartScheduler+0xae>
	__asm volatile
 8001afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001afe:	f383 8811 	msr	BASEPRI, r3
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	f3bf 8f4f 	dsb	sy
 8001b0a:	60fb      	str	r3, [r7, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	e7fd      	b.n	8001b0e <vTaskStartScheduler+0xaa>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	08004878 	.word	0x08004878
 8001b20:	080021ad 	.word	0x080021ad
 8001b24:	20012d90 	.word	0x20012d90
 8001b28:	20012d8c 	.word	0x20012d8c
 8001b2c:	20012d78 	.word	0x20012d78
 8001b30:	20012d70 	.word	0x20012d70

08001b34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <vTaskSuspendAll+0x18>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	4a03      	ldr	r2, [pc, #12]	@ (8001b4c <vTaskSuspendAll+0x18>)
 8001b40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	20012d94 	.word	0x20012d94

08001b50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b5e:	4b42      	ldr	r3, [pc, #264]	@ (8001c68 <xTaskResumeAll+0x118>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <xTaskResumeAll+0x2e>
	__asm volatile
 8001b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	603b      	str	r3, [r7, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	e7fd      	b.n	8001b7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b7e:	f7fe ff83 	bl	8000a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001b82:	4b39      	ldr	r3, [pc, #228]	@ (8001c68 <xTaskResumeAll+0x118>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	4a37      	ldr	r2, [pc, #220]	@ (8001c68 <xTaskResumeAll+0x118>)
 8001b8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <xTaskResumeAll+0x118>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d161      	bne.n	8001c58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <xTaskResumeAll+0x11c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d05d      	beq.n	8001c58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b9c:	e02e      	b.n	8001bfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b9e:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <xTaskResumeAll+0x120>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fe38 	bl	8000820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fe33 	bl	8000820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <xTaskResumeAll+0x124>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <xTaskResumeAll+0x124>)
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <xTaskResumeAll+0x128>)
 8001bda:	441a      	add	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3304      	adds	r3, #4
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7fe fdbf 	bl	8000766 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <xTaskResumeAll+0x12c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d302      	bcc.n	8001bfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <xTaskResumeAll+0x130>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <xTaskResumeAll+0x120>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1cc      	bne.n	8001b9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c0a:	f000 fb87 	bl	800231c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c84 <xTaskResumeAll+0x134>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d010      	beq.n	8001c3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c1a:	f000 f847 	bl	8001cac <xTaskIncrementTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001c24:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <xTaskResumeAll+0x130>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f1      	bne.n	8001c1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <xTaskResumeAll+0x134>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c3c:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <xTaskResumeAll+0x130>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d009      	beq.n	8001c58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c44:	2301      	movs	r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <xTaskResumeAll+0x138>)
 8001c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c58:	f7fe ff48 	bl	8000aec <vPortExitCritical>

	return xAlreadyYielded;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20012d94 	.word	0x20012d94
 8001c6c:	20012d6c 	.word	0x20012d6c
 8001c70:	20012d2c 	.word	0x20012d2c
 8001c74:	20012d74 	.word	0x20012d74
 8001c78:	20012c98 	.word	0x20012c98
 8001c7c:	20012c94 	.word	0x20012c94
 8001c80:	20012d80 	.word	0x20012d80
 8001c84:	20012d7c 	.word	0x20012d7c
 8001c88:	e000ed04 	.word	0xe000ed04

08001c8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001c92:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <xTaskGetTickCount+0x1c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20012d70 	.word	0x20012d70

08001cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb6:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <xTaskIncrementTick+0x158>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 8095 	bne.w	8001dea <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cc0:	4b51      	ldr	r3, [pc, #324]	@ (8001e08 <xTaskIncrementTick+0x15c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001e08 <xTaskIncrementTick+0x15c>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d121      	bne.n	8001d18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001e0c <xTaskIncrementTick+0x160>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	603b      	str	r3, [r7, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	e7fd      	b.n	8001cf2 <xTaskIncrementTick+0x46>
 8001cf6:	4b45      	ldr	r3, [pc, #276]	@ (8001e0c <xTaskIncrementTick+0x160>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <xTaskIncrementTick+0x164>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a42      	ldr	r2, [pc, #264]	@ (8001e0c <xTaskIncrementTick+0x160>)
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	4a42      	ldr	r2, [pc, #264]	@ (8001e10 <xTaskIncrementTick+0x164>)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	4b42      	ldr	r3, [pc, #264]	@ (8001e14 <xTaskIncrementTick+0x168>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <xTaskIncrementTick+0x168>)
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	f000 fb02 	bl	800231c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d18:	4b3f      	ldr	r3, [pc, #252]	@ (8001e18 <xTaskIncrementTick+0x16c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d348      	bcc.n	8001db4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d22:	4b3a      	ldr	r3, [pc, #232]	@ (8001e0c <xTaskIncrementTick+0x160>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e18 <xTaskIncrementTick+0x16c>)
 8001d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d32:	601a      	str	r2, [r3, #0]
					break;
 8001d34:	e03e      	b.n	8001db4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d36:	4b35      	ldr	r3, [pc, #212]	@ (8001e0c <xTaskIncrementTick+0x160>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d203      	bcs.n	8001d56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d4e:	4a32      	ldr	r2, [pc, #200]	@ (8001e18 <xTaskIncrementTick+0x16c>)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d54:	e02e      	b.n	8001db4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fd60 	bl	8000820 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3318      	adds	r3, #24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fd57 	bl	8000820 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <xTaskIncrementTick+0x170>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	4a26      	ldr	r2, [pc, #152]	@ (8001e1c <xTaskIncrementTick+0x170>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <xTaskIncrementTick+0x174>)
 8001d92:	441a      	add	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7fe fce3 	bl	8000766 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <xTaskIncrementTick+0x178>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3b9      	bcc.n	8001d22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db2:	e7b6      	b.n	8001d22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <xTaskIncrementTick+0x178>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dba:	4919      	ldr	r1, [pc, #100]	@ (8001e20 <xTaskIncrementTick+0x174>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d901      	bls.n	8001dd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <xTaskIncrementTick+0x17c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8001dd8:	f000 ff3b 	bl	8002c52 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ddc:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <xTaskIncrementTick+0x180>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e006      	b.n	8001df8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <xTaskIncrementTick+0x17c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <xTaskIncrementTick+0x17c>)
 8001df2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001df4:	f000 ff2d 	bl	8002c52 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8001df8:	697b      	ldr	r3, [r7, #20]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20012d94 	.word	0x20012d94
 8001e08:	20012d70 	.word	0x20012d70
 8001e0c:	20012d24 	.word	0x20012d24
 8001e10:	20012d28 	.word	0x20012d28
 8001e14:	20012d84 	.word	0x20012d84
 8001e18:	20012d8c 	.word	0x20012d8c
 8001e1c:	20012d74 	.word	0x20012d74
 8001e20:	20012c98 	.word	0x20012c98
 8001e24:	20012c94 	.word	0x20012c94
 8001e28:	20012d7c 	.word	0x20012d7c
 8001e2c:	20012d80 	.word	0x20012d80

08001e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e36:	4b3a      	ldr	r3, [pc, #232]	@ (8001f20 <vTaskSwitchContext+0xf0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <vTaskSwitchContext+0xf4>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e44:	e067      	b.n	8001f16 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <vTaskSwitchContext+0xf4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <vTaskSwitchContext+0xf8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d111      	bne.n	8001e88 <vTaskSwitchContext+0x58>
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10b      	bne.n	8001e88 <vTaskSwitchContext+0x58>
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3308      	adds	r3, #8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d105      	bne.n	8001e88 <vTaskSwitchContext+0x58>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d008      	beq.n	8001e9a <vTaskSwitchContext+0x6a>
 8001e88:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <vTaskSwitchContext+0xf8>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <vTaskSwitchContext+0xf8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3334      	adds	r3, #52	@ 0x34
 8001e92:	4619      	mov	r1, r3
 8001e94:	4610      	mov	r0, r2
 8001e96:	f000 fee3 	bl	8002c60 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e9a:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <vTaskSwitchContext+0xfc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	f1c3 031f 	rsb	r3, r3, #31
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	491f      	ldr	r1, [pc, #124]	@ (8001f30 <vTaskSwitchContext+0x100>)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <vTaskSwitchContext+0xac>
	__asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	607b      	str	r3, [r7, #4]
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <vTaskSwitchContext+0xa8>
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <vTaskSwitchContext+0x100>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	3308      	adds	r3, #8
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d104      	bne.n	8001f0c <vTaskSwitchContext+0xdc>
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <vTaskSwitchContext+0xf8>)
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20012d94 	.word	0x20012d94
 8001f24:	20012d80 	.word	0x20012d80
 8001f28:	20012c94 	.word	0x20012c94
 8001f2c:	20012d74 	.word	0x20012d74
 8001f30:	20012c98 	.word	0x20012c98

08001f34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10b      	bne.n	8001f5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8001f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f48:	f383 8811 	msr	BASEPRI, r3
 8001f4c:	f3bf 8f6f 	isb	sy
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	60fb      	str	r3, [r7, #12]
}
 8001f56:	bf00      	nop
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f5c:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <vTaskPlaceOnEventList+0x48>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3318      	adds	r3, #24
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe fc22 	bl	80007ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	6838      	ldr	r0, [r7, #0]
 8001f6e:	f000 fa9b 	bl	80024a8 <prvAddCurrentTaskToDelayedList>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20012c94 	.word	0x20012c94

08001f80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10b      	bne.n	8001faa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8001f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	617b      	str	r3, [r7, #20]
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	e7fd      	b.n	8001fa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <vTaskPlaceOnEventListRestricted+0x54>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	3318      	adds	r3, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f7fe fbd7 	bl	8000766 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	68b8      	ldr	r0, [r7, #8]
 8001fc8:	f000 fa6e 	bl	80024a8 <prvAddCurrentTaskToDelayedList>
	}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20012c94 	.word	0x20012c94

08001fd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10b      	bne.n	8002006 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	60fb      	str	r3, [r7, #12]
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	e7fd      	b.n	8002002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	3318      	adds	r3, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fc08 	bl	8000820 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <xTaskRemoveFromEventList+0xb0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d11c      	bne.n	8002052 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	3304      	adds	r3, #4
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fbff 	bl	8000820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002026:	2201      	movs	r2, #1
 8002028:	409a      	lsls	r2, r3
 800202a:	4b18      	ldr	r3, [pc, #96]	@ (800208c <xTaskRemoveFromEventList+0xb4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	4a16      	ldr	r2, [pc, #88]	@ (800208c <xTaskRemoveFromEventList+0xb4>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4a13      	ldr	r2, [pc, #76]	@ (8002090 <xTaskRemoveFromEventList+0xb8>)
 8002042:	441a      	add	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3304      	adds	r3, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7fe fb8b 	bl	8000766 <vListInsertEnd>
 8002050:	e005      	b.n	800205e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	3318      	adds	r3, #24
 8002056:	4619      	mov	r1, r3
 8002058:	480e      	ldr	r0, [pc, #56]	@ (8002094 <xTaskRemoveFromEventList+0xbc>)
 800205a:	f7fe fb84 	bl	8000766 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <xTaskRemoveFromEventList+0xc0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002068:	429a      	cmp	r2, r3
 800206a:	d905      	bls.n	8002078 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <xTaskRemoveFromEventList+0xc4>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	e001      	b.n	800207c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800207c:	697b      	ldr	r3, [r7, #20]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20012d94 	.word	0x20012d94
 800208c:	20012d74 	.word	0x20012d74
 8002090:	20012c98 	.word	0x20012c98
 8002094:	20012d2c 	.word	0x20012d2c
 8002098:	20012c94 	.word	0x20012c94
 800209c:	20012d80 	.word	0x20012d80

080020a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <vTaskInternalSetTimeOutState+0x24>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <vTaskInternalSetTimeOutState+0x28>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20012d84 	.word	0x20012d84
 80020c8:	20012d70 	.word	0x20012d70

080020cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10b      	bne.n	80020f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80020dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020e0:	f383 8811 	msr	BASEPRI, r3
 80020e4:	f3bf 8f6f 	isb	sy
 80020e8:	f3bf 8f4f 	dsb	sy
 80020ec:	613b      	str	r3, [r7, #16]
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	e7fd      	b.n	80020f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10b      	bne.n	8002112 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80020fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020fe:	f383 8811 	msr	BASEPRI, r3
 8002102:	f3bf 8f6f 	isb	sy
 8002106:	f3bf 8f4f 	dsb	sy
 800210a:	60fb      	str	r3, [r7, #12]
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002112:	f7fe fcb9 	bl	8000a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <xTaskCheckForTimeOut+0xc0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d102      	bne.n	8002136 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	e023      	b.n	800217e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b15      	ldr	r3, [pc, #84]	@ (8002190 <xTaskCheckForTimeOut+0xc4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d007      	beq.n	8002152 <xTaskCheckForTimeOut+0x86>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	429a      	cmp	r2, r3
 800214a:	d302      	bcc.n	8002152 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800214c:	2301      	movs	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	e015      	b.n	800217e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	429a      	cmp	r2, r3
 800215a:	d20b      	bcs.n	8002174 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff99 	bl	80020a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e004      	b.n	800217e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800217a:	2301      	movs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800217e:	f7fe fcb5 	bl	8000aec <vPortExitCritical>

	return xReturn;
 8002182:	69fb      	ldr	r3, [r7, #28]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20012d70 	.word	0x20012d70
 8002190:	20012d84 	.word	0x20012d84

08002194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002198:	4b03      	ldr	r3, [pc, #12]	@ (80021a8 <vTaskMissedYield+0x14>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	20012d80 	.word	0x20012d80

080021ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021b4:	f000 f854 	bl	8002260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <prvIdleTask+0x2c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d907      	bls.n	80021d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <prvIdleTask+0x30>)
 80021c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80021d0:	f000 fd38 	bl	8002c44 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80021d4:	e7ee      	b.n	80021b4 <prvIdleTask+0x8>
 80021d6:	bf00      	nop
 80021d8:	20012c98 	.word	0x20012c98
 80021dc:	e000ed04 	.word	0xe000ed04

080021e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	e00c      	b.n	8002206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <prvInitialiseTaskLists+0x60>)
 80021f8:	4413      	add	r3, r2
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe fa86 	bl	800070c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3301      	adds	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d9ef      	bls.n	80021ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800220c:	480d      	ldr	r0, [pc, #52]	@ (8002244 <prvInitialiseTaskLists+0x64>)
 800220e:	f7fe fa7d 	bl	800070c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002212:	480d      	ldr	r0, [pc, #52]	@ (8002248 <prvInitialiseTaskLists+0x68>)
 8002214:	f7fe fa7a 	bl	800070c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <prvInitialiseTaskLists+0x6c>)
 800221a:	f7fe fa77 	bl	800070c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800221e:	480c      	ldr	r0, [pc, #48]	@ (8002250 <prvInitialiseTaskLists+0x70>)
 8002220:	f7fe fa74 	bl	800070c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002224:	480b      	ldr	r0, [pc, #44]	@ (8002254 <prvInitialiseTaskLists+0x74>)
 8002226:	f7fe fa71 	bl	800070c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800222a:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <prvInitialiseTaskLists+0x78>)
 800222c:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <prvInitialiseTaskLists+0x64>)
 800222e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002230:	4b0a      	ldr	r3, [pc, #40]	@ (800225c <prvInitialiseTaskLists+0x7c>)
 8002232:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <prvInitialiseTaskLists+0x68>)
 8002234:	601a      	str	r2, [r3, #0]
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20012c98 	.word	0x20012c98
 8002244:	20012cfc 	.word	0x20012cfc
 8002248:	20012d10 	.word	0x20012d10
 800224c:	20012d2c 	.word	0x20012d2c
 8002250:	20012d40 	.word	0x20012d40
 8002254:	20012d58 	.word	0x20012d58
 8002258:	20012d24 	.word	0x20012d24
 800225c:	20012d28 	.word	0x20012d28

08002260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002266:	e019      	b.n	800229c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002268:	f7fe fc0e 	bl	8000a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <prvCheckTasksWaitingTermination+0x50>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3304      	adds	r3, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fad1 	bl	8000820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <prvCheckTasksWaitingTermination+0x54>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <prvCheckTasksWaitingTermination+0x54>)
 8002286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 8002290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002292:	f7fe fc2b 	bl	8000aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f810 	bl	80022bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <prvCheckTasksWaitingTermination+0x58>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e1      	bne.n	8002268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20012d40 	.word	0x20012d40
 80022b4:	20012d6c 	.word	0x20012d6c
 80022b8:	20012d54 	.word	0x20012d54

080022bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f9b6 	bl	8000644 <vPortFree>
				vPortFree( pxTCB );
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe f9b3 	bl	8000644 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022de:	e019      	b.n	8002314 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d103      	bne.n	80022f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe f9aa 	bl	8000644 <vPortFree>
	}
 80022f0:	e010      	b.n	8002314 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d00b      	beq.n	8002314 <prvDeleteTCB+0x58>
	__asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	60fb      	str	r3, [r7, #12]
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <prvDeleteTCB+0x54>
	}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002322:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <prvResetNextTaskUnblockTime+0x38>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <prvResetNextTaskUnblockTime+0x3c>)
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002334:	e008      	b.n	8002348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <prvResetNextTaskUnblockTime+0x38>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <prvResetNextTaskUnblockTime+0x3c>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20012d24 	.word	0x20012d24
 8002358:	20012d8c 	.word	0x20012d8c

0800235c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <xTaskGetSchedulerState+0x34>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800236a:	2301      	movs	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	e008      	b.n	8002382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002370:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <xTaskGetSchedulerState+0x38>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002378:	2302      	movs	r3, #2
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	e001      	b.n	8002382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002382:	687b      	ldr	r3, [r7, #4]
	}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	20012d78 	.word	0x20012d78
 8002394:	20012d94 	.word	0x20012d94

08002398 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d070      	beq.n	8002490 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80023ae:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <xTaskPriorityDisinherit+0x104>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d00b      	beq.n	80023d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80023b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	60fb      	str	r3, [r7, #12]
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80023d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023dc:	f383 8811 	msr	BASEPRI, r3
 80023e0:	f3bf 8f6f 	isb	sy
 80023e4:	f3bf 8f4f 	dsb	sy
 80023e8:	60bb      	str	r3, [r7, #8]
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f4:	1e5a      	subs	r2, r3, #1
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002402:	429a      	cmp	r2, r3
 8002404:	d044      	beq.n	8002490 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d140      	bne.n	8002490 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3304      	adds	r3, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fa04 	bl	8000820 <uxListRemove>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d115      	bne.n	800244a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002422:	491f      	ldr	r1, [pc, #124]	@ (80024a0 <xTaskPriorityDisinherit+0x108>)
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <xTaskPriorityDisinherit+0xb2>
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	2201      	movs	r2, #1
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <xTaskPriorityDisinherit+0x10c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4013      	ands	r3, r2
 8002446:	4a17      	ldr	r2, [pc, #92]	@ (80024a4 <xTaskPriorityDisinherit+0x10c>)
 8002448:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	f1c3 0205 	rsb	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002462:	2201      	movs	r2, #1
 8002464:	409a      	lsls	r2, r3
 8002466:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <xTaskPriorityDisinherit+0x10c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <xTaskPriorityDisinherit+0x10c>)
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <xTaskPriorityDisinherit+0x108>)
 800247e:	441a      	add	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f7fe f96d 	bl	8000766 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800248c:	2301      	movs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002490:	697b      	ldr	r3, [r7, #20]
	}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20012c94 	.word	0x20012c94
 80024a0:	20012c98 	.word	0x20012c98
 80024a4:	20012d74 	.word	0x20012d74

080024a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80024b2:	4b29      	ldr	r3, [pc, #164]	@ (8002558 <prvAddCurrentTaskToDelayedList+0xb0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3304      	adds	r3, #4
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f9ae 	bl	8000820 <uxListRemove>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80024ca:	4b24      	ldr	r3, [pc, #144]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	2201      	movs	r2, #1
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43da      	mvns	r2, r3
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4013      	ands	r3, r2
 80024de:	4a20      	ldr	r2, [pc, #128]	@ (8002560 <prvAddCurrentTaskToDelayedList+0xb8>)
 80024e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d10a      	bne.n	8002500 <prvAddCurrentTaskToDelayedList+0x58>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024f0:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	481a      	ldr	r0, [pc, #104]	@ (8002564 <prvAddCurrentTaskToDelayedList+0xbc>)
 80024fa:	f7fe f934 	bl	8000766 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80024fe:	e026      	b.n	800254e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002508:	4b14      	ldr	r3, [pc, #80]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d209      	bcs.n	800252c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002518:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <prvAddCurrentTaskToDelayedList+0xc0>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	3304      	adds	r3, #4
 8002522:	4619      	mov	r1, r3
 8002524:	4610      	mov	r0, r2
 8002526:	f7fe f942 	bl	80007ae <vListInsert>
}
 800252a:	e010      	b.n	800254e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <prvAddCurrentTaskToDelayedList+0xc4>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	3304      	adds	r3, #4
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f7fe f938 	bl	80007ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800253e:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	429a      	cmp	r2, r3
 8002546:	d202      	bcs.n	800254e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002548:	4a09      	ldr	r2, [pc, #36]	@ (8002570 <prvAddCurrentTaskToDelayedList+0xc8>)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	6013      	str	r3, [r2, #0]
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20012d70 	.word	0x20012d70
 800255c:	20012c94 	.word	0x20012c94
 8002560:	20012d74 	.word	0x20012d74
 8002564:	20012d58 	.word	0x20012d58
 8002568:	20012d28 	.word	0x20012d28
 800256c:	20012d24 	.word	0x20012d24
 8002570:	20012d8c 	.word	0x20012d8c

08002574 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	@ 0x28
 8002578:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800257e:	f000 faf7 	bl	8002b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002582:	4b1d      	ldr	r3, [pc, #116]	@ (80025f8 <xTimerCreateTimerTask+0x84>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d021      	beq.n	80025ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002592:	1d3a      	adds	r2, r7, #4
 8002594:	f107 0108 	add.w	r1, r7, #8
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fb81 	bl	8002ca4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	9202      	str	r2, [sp, #8]
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	460a      	mov	r2, r1
 80025b4:	4911      	ldr	r1, [pc, #68]	@ (80025fc <xTimerCreateTimerTask+0x88>)
 80025b6:	4812      	ldr	r0, [pc, #72]	@ (8002600 <xTimerCreateTimerTask+0x8c>)
 80025b8:	f7ff f87a 	bl	80016b0 <xTaskCreateStatic>
 80025bc:	4603      	mov	r3, r0
 80025be:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <xTimerCreateTimerTask+0x90>)
 80025c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <xTimerCreateTimerTask+0x90>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80025ca:	2301      	movs	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	613b      	str	r3, [r7, #16]
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80025ec:	697b      	ldr	r3, [r7, #20]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20012dc8 	.word	0x20012dc8
 80025fc:	08004880 	.word	0x08004880
 8002600:	08002741 	.word	0x08002741
 8002604:	20012dcc 	.word	0x20012dcc

08002608 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <xTimerGenericCommand+0x30>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	623b      	str	r3, [r7, #32]
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <xTimerGenericCommand+0x98>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02a      	beq.n	8002696 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	dc18      	bgt.n	8002684 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002652:	f7ff fe83 	bl	800235c <xTaskGetSchedulerState>
 8002656:	4603      	mov	r3, r0
 8002658:	2b02      	cmp	r3, #2
 800265a:	d109      	bne.n	8002670 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800265c:	4b10      	ldr	r3, [pc, #64]	@ (80026a0 <xTimerGenericCommand+0x98>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f107 0114 	add.w	r1, r7, #20
 8002664:	2300      	movs	r3, #0
 8002666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002668:	f7fe fc32 	bl	8000ed0 <xQueueGenericSend>
 800266c:	6278      	str	r0, [r7, #36]	@ 0x24
 800266e:	e012      	b.n	8002696 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <xTimerGenericCommand+0x98>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	f107 0114 	add.w	r1, r7, #20
 8002678:	2300      	movs	r3, #0
 800267a:	2200      	movs	r2, #0
 800267c:	f7fe fc28 	bl	8000ed0 <xQueueGenericSend>
 8002680:	6278      	str	r0, [r7, #36]	@ 0x24
 8002682:	e008      	b.n	8002696 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002684:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <xTimerGenericCommand+0x98>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	f107 0114 	add.w	r1, r7, #20
 800268c:	2300      	movs	r3, #0
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	f7fe fd20 	bl	80010d4 <xQueueGenericSendFromISR>
 8002694:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	@ 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20012dc8 	.word	0x20012dc8

080026a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026ae:	4b23      	ldr	r3, [pc, #140]	@ (800273c <prvProcessExpiredTimer+0x98>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe f8af 	bl	8000820 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	699a      	ldr	r2, [r3, #24]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	18d1      	adds	r1, r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	6978      	ldr	r0, [r7, #20]
 80026de:	f000 f8d5 	bl	800288c <prvInsertTimerInActiveList>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026e8:	2300      	movs	r3, #0
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	2100      	movs	r1, #0
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff88 	bl	8002608 <xTimerGenericCommand>
 80026f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d114      	bne.n	800272a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	60fb      	str	r3, [r7, #12]
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	6978      	ldr	r0, [r7, #20]
 8002730:	4798      	blx	r3
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20012dc0 	.word	0x20012dc0

08002740 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f859 	bl	8002804 <prvGetNextExpireTime>
 8002752:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4619      	mov	r1, r3
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f805 	bl	8002768 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800275e:	f000 f8d7 	bl	8002910 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002762:	bf00      	nop
 8002764:	e7f0      	b.n	8002748 <prvTimerTask+0x8>
	...

08002768 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002772:	f7ff f9df 	bl	8001b34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f866 	bl	800284c <prvSampleTimeNow>
 8002780:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d130      	bne.n	80027ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <prvProcessTimerOrBlockTask+0x3c>
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	429a      	cmp	r2, r3
 8002794:	d806      	bhi.n	80027a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002796:	f7ff f9db 	bl	8001b50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800279a:	68f9      	ldr	r1, [r7, #12]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff81 	bl	80026a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80027a2:	e024      	b.n	80027ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <prvProcessTimerOrBlockTask+0x90>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <prvProcessTimerOrBlockTask+0x50>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <prvProcessTimerOrBlockTask+0x52>
 80027b8:	2300      	movs	r3, #0
 80027ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80027bc:	4b0f      	ldr	r3, [pc, #60]	@ (80027fc <prvProcessTimerOrBlockTask+0x94>)
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	f7fe ff3d 	bl	8001648 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80027ce:	f7ff f9bf 	bl	8001b50 <xTaskResumeAll>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <prvProcessTimerOrBlockTask+0x98>)
 80027da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	f3bf 8f6f 	isb	sy
}
 80027e8:	e001      	b.n	80027ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80027ea:	f7ff f9b1 	bl	8001b50 <xTaskResumeAll>
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20012dc4 	.word	0x20012dc4
 80027fc:	20012dc8 	.word	0x20012dc8
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <prvGetNextExpireTime+0x44>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <prvGetNextExpireTime+0x16>
 8002816:	2201      	movs	r2, #1
 8002818:	e000      	b.n	800281c <prvGetNextExpireTime+0x18>
 800281a:	2200      	movs	r2, #0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <prvGetNextExpireTime+0x44>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e001      	b.n	8002838 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20012dc0 	.word	0x20012dc0

0800284c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002854:	f7ff fa1a 	bl	8001c8c <xTaskGetTickCount>
 8002858:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <prvSampleTimeNow+0x3c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d205      	bcs.n	8002870 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002864:	f000 f91e 	bl	8002aa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	e002      	b.n	8002876 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002876:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <prvSampleTimeNow+0x3c>)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800287c:	68fb      	ldr	r3, [r7, #12]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20012dd0 	.word	0x20012dd0

0800288c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d812      	bhi.n	80028d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d302      	bcc.n	80028c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80028c0:	2301      	movs	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e01b      	b.n	80028fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <prvInsertTimerInActiveList+0x7c>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3304      	adds	r3, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f7fd ff6c 	bl	80007ae <vListInsert>
 80028d6:	e012      	b.n	80028fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d206      	bcs.n	80028ee <prvInsertTimerInActiveList+0x62>
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e007      	b.n	80028fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028ee:	4b07      	ldr	r3, [pc, #28]	@ (800290c <prvInsertTimerInActiveList+0x80>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	3304      	adds	r3, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4610      	mov	r0, r2
 80028fa:	f7fd ff58 	bl	80007ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 80028fe:	697b      	ldr	r3, [r7, #20]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20012dc4 	.word	0x20012dc4
 800290c:	20012dc0 	.word	0x20012dc0

08002910 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	@ 0x30
 8002914:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002916:	e0b2      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f2c0 80af 	blt.w	8002a7e <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d004      	beq.n	8002936 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	3304      	adds	r3, #4
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd ff75 	bl	8000820 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff87 	bl	800284c <prvSampleTimeNow>
 800293e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b09      	cmp	r3, #9
 8002944:	f200 8098 	bhi.w	8002a78 <prvProcessReceivedCommands+0x168>
 8002948:	a201      	add	r2, pc, #4	@ (adr r2, 8002950 <prvProcessReceivedCommands+0x40>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002979 	.word	0x08002979
 8002954:	08002979 	.word	0x08002979
 8002958:	08002979 	.word	0x08002979
 800295c:	080029ef 	.word	0x080029ef
 8002960:	08002a03 	.word	0x08002a03
 8002964:	08002a4f 	.word	0x08002a4f
 8002968:	08002979 	.word	0x08002979
 800296c:	08002979 	.word	0x08002979
 8002970:	080029ef 	.word	0x080029ef
 8002974:	08002a03 	.word	0x08002a03
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	18d1      	adds	r1, r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002998:	f7ff ff78 	bl	800288c <prvInsertTimerInActiveList>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d06c      	beq.n	8002a7c <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d061      	beq.n	8002a7c <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	441a      	add	r2, r3
 80029c0:	2300      	movs	r3, #0
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	2100      	movs	r1, #0
 80029c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029ca:	f7ff fe1d 	bl	8002608 <xTimerGenericCommand>
 80029ce:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d152      	bne.n	8002a7c <prvProcessReceivedCommands+0x16c>
	__asm volatile
 80029d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	61bb      	str	r3, [r7, #24]
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	e7fd      	b.n	80029ea <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002a00:	e03d      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	617b      	str	r3, [r7, #20]
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	e7fd      	b.n	8002a36 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	18d1      	adds	r1, r2, r3
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a48:	f7ff ff20 	bl	800288c <prvInsertTimerInActiveList>
					break;
 8002a4c:	e017      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8002a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a5e:	f7fd fdf1 	bl	8000644 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002a62:	e00c      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002a76:	e002      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8002a78:	bf00      	nop
 8002a7a:	e000      	b.n	8002a7e <prvProcessReceivedCommands+0x16e>
					break;
 8002a7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <prvProcessReceivedCommands+0x190>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f107 0108 	add.w	r1, r7, #8
 8002a86:	2200      	movs	r2, #0
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fbc1 	bl	8001210 <xQueueReceive>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f47f af41 	bne.w	8002918 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	@ 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20012dc8 	.word	0x20012dc8

08002aa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002aaa:	e049      	b.n	8002b40 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002aac:	4b2e      	ldr	r3, [pc, #184]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd feab 	bl	8000820 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02f      	beq.n	8002b40 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90e      	bls.n	8002b10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002afe:	4b1a      	ldr	r3, [pc, #104]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	4610      	mov	r0, r2
 8002b0a:	f7fd fe50 	bl	80007ae <vListInsert>
 8002b0e:	e017      	b.n	8002b40 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b10:	2300      	movs	r3, #0
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f7ff fd74 	bl	8002608 <xTimerGenericCommand>
 8002b20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	603b      	str	r3, [r7, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b40:	4b09      	ldr	r3, [pc, #36]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1b0      	bne.n	8002aac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <prvSwitchTimerLists+0xc8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <prvSwitchTimerLists+0xc4>)
 8002b56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002b58:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <prvSwitchTimerLists+0xc8>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20012dc0 	.word	0x20012dc0
 8002b6c:	20012dc4 	.word	0x20012dc4

08002b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002b76:	f7fd ff87 	bl	8000a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <prvCheckForValidListAndQueue+0x60>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d120      	bne.n	8002bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002b82:	4814      	ldr	r0, [pc, #80]	@ (8002bd4 <prvCheckForValidListAndQueue+0x64>)
 8002b84:	f7fd fdc2 	bl	800070c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002b88:	4813      	ldr	r0, [pc, #76]	@ (8002bd8 <prvCheckForValidListAndQueue+0x68>)
 8002b8a:	f7fd fdbf 	bl	800070c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002b8e:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <prvCheckForValidListAndQueue+0x6c>)
 8002b90:	4a10      	ldr	r2, [pc, #64]	@ (8002bd4 <prvCheckForValidListAndQueue+0x64>)
 8002b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002b94:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <prvCheckForValidListAndQueue+0x70>)
 8002b96:	4a10      	ldr	r2, [pc, #64]	@ (8002bd8 <prvCheckForValidListAndQueue+0x68>)
 8002b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <prvCheckForValidListAndQueue+0x74>)
 8002ba0:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <prvCheckForValidListAndQueue+0x78>)
 8002ba2:	210c      	movs	r1, #12
 8002ba4:	200a      	movs	r0, #10
 8002ba6:	f7fe f8f3 	bl	8000d90 <xQueueGenericCreateStatic>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <prvCheckForValidListAndQueue+0x60>)
 8002bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002bb0:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <prvCheckForValidListAndQueue+0x60>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <prvCheckForValidListAndQueue+0x60>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	490b      	ldr	r1, [pc, #44]	@ (8002bec <prvCheckForValidListAndQueue+0x7c>)
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fd18 	bl	80015f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bc4:	f7fd ff92 	bl	8000aec <vPortExitCritical>
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20012dc8 	.word	0x20012dc8
 8002bd4:	20012d98 	.word	0x20012d98
 8002bd8:	20012dac 	.word	0x20012dac
 8002bdc:	20012dc0 	.word	0x20012dc0
 8002be0:	20012dc4 	.word	0x20012dc4
 8002be4:	20012e4c 	.word	0x20012e4c
 8002be8:	20012dd4 	.word	0x20012dd4
 8002bec:	08004888 	.word	0x08004888

08002bf0 <vPrintString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vPrintString(const char *str) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
//	vTaskSuspendScheduler();
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fd faf1 	bl	80001e0 <strlen>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4803      	ldr	r0, [pc, #12]	@ (8002c18 <vPrintString+0x28>)
 8002c0a:	f001 fa33 	bl	8004074 <HAL_UART_Transmit>
//    xTaskResumeScheduler();
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20012e9c 	.word	0x20012e9c

08002c1c <vTaskFunction>:

static const char *pcTextForTask1 = "<Task 1> is running\r\n";
static const char *pcTextForTask2 = "<Task 2> is running\r\n";
void vTaskFunction(void *pvParameters){
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	char *pcTaskName;
	const TickType_t xDelay250ms = pdMS_TO_TICKS(250);
 8002c24:	23fa      	movs	r3, #250	@ 0xfa
 8002c26:	60fb      	str	r3, [r7, #12]
	pcTaskName = (char *)pvParameters;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	60bb      	str	r3, [r7, #8]
	for(;;){
		vPrintString(pcTaskName);
 8002c2c:	68b8      	ldr	r0, [r7, #8]
 8002c2e:	f7ff ffdf 	bl	8002bf0 <vPrintString>
		vTaskDelay(xDelay250ms);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7fe fee0 	bl	80019f8 <vTaskDelay>
		vPrintString(pcTaskName);
 8002c38:	bf00      	nop
 8002c3a:	e7f7      	b.n	8002c2c <vTaskFunction+0x10>

08002c3c <vApplicationMallocFailedHook>:
	}
}
/* USER CODE BEGIN 4 */
void vApplicationMallocFailedHook(void) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
    while(1);
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <vApplicationMallocFailedHook+0x4>

08002c44 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void) {
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
    // Optional: Idle task hook
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <vApplicationTickHook>:

void vApplicationTickHook(void) {
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
    // Optional: Tick hook
}
 8002c56:	bf00      	nop
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
    while(1);
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <vApplicationStackOverflowHook+0xa>
	...

08002c70 <vApplicationGetIdleTaskMemory>:
}

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                   StackType_t **ppxIdleTaskStackBuffer,
                                   uint32_t *pulIdleTaskStackSize ) {
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  static StaticTask_t xIdleTaskTCB;
  static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a07      	ldr	r2, [pc, #28]	@ (8002c9c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a06      	ldr	r2, [pc, #24]	@ (8002ca0 <vApplicationGetIdleTaskMemory+0x30>)
 8002c86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2282      	movs	r2, #130	@ 0x82
 8002c8c:	601a      	str	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20012ee4 	.word	0x20012ee4
 8002ca0:	20012f3c 	.word	0x20012f3c

08002ca4 <vApplicationGetTimerTaskMemory>:

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                    StackType_t **ppxTimerTaskStackBuffer,
                                    uint32_t *pulTimerTaskStackSize ) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  static StaticTask_t xTimerTaskTCB;
  static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4a06      	ldr	r2, [pc, #24]	@ (8002cd4 <vApplicationGetTimerTaskMemory+0x30>)
 8002cba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cc2:	601a      	str	r2, [r3, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20013144 	.word	0x20013144
 8002cd4:	2001319c 	.word	0x2001319c

08002cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cde:	f000 f9ff 	bl	80030e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce2:	f000 f82b 	bl	8002d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ce6:	f000 f8bf 	bl	8002e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002cea:	f000 f893 	bl	8002e14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTaskFunction, "Task 1", 1000, (void*)pcTextForTask1, 1, NULL);
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <main+0x50>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	9201      	str	r2, [sp, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	9200      	str	r2, [sp, #0]
 8002cfa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002cfe:	490b      	ldr	r1, [pc, #44]	@ (8002d2c <main+0x54>)
 8002d00:	480b      	ldr	r0, [pc, #44]	@ (8002d30 <main+0x58>)
 8002d02:	f7fe fd35 	bl	8001770 <xTaskCreate>
  xTaskCreate(vTaskFunction, "Task 2", 1000, (void*)pcTextForTask2, 2, NULL);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <main+0x5c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	9201      	str	r2, [sp, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	9200      	str	r2, [sp, #0]
 8002d12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d16:	4908      	ldr	r1, [pc, #32]	@ (8002d38 <main+0x60>)
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <main+0x58>)
 8002d1a:	f7fe fd29 	bl	8001770 <xTaskCreate>
  vTaskStartScheduler();
 8002d1e:	f7fe fea1 	bl	8001a64 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d22:	bf00      	nop
 8002d24:	e7fd      	b.n	8002d22 <main+0x4a>
 8002d26:	bf00      	nop
 8002d28:	20000008 	.word	0x20000008
 8002d2c:	080048c0 	.word	0x080048c0
 8002d30:	08002c1d 	.word	0x08002c1d
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	080048c8 	.word	0x080048c8

08002d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b094      	sub	sp, #80	@ 0x50
 8002d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d42:	f107 0320 	add.w	r3, r7, #32
 8002d46:	2230      	movs	r2, #48	@ 0x30
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fd4e 	bl	80047ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	4b29      	ldr	r3, [pc, #164]	@ (8002e0c <SystemClock_Config+0xd0>)
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	4a28      	ldr	r2, [pc, #160]	@ (8002e0c <SystemClock_Config+0xd0>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d70:	4b26      	ldr	r3, [pc, #152]	@ (8002e0c <SystemClock_Config+0xd0>)
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <SystemClock_Config+0xd4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002d88:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <SystemClock_Config+0xd4>)
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b1f      	ldr	r3, [pc, #124]	@ (8002e10 <SystemClock_Config+0xd4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da0:	2301      	movs	r3, #1
 8002da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da4:	2310      	movs	r3, #16
 8002da6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da8:	2302      	movs	r3, #2
 8002daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dac:	2300      	movs	r3, #0
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002db0:	2310      	movs	r3, #16
 8002db2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002db4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002dba:	2304      	movs	r3, #4
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc2:	f107 0320 	add.w	r3, r7, #32
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fc6c 	bl	80036a4 <HAL_RCC_OscConfig>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002dd2:	f000 f8b7 	bl	8002f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002de2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002de6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	2102      	movs	r1, #2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fece 	bl	8003b94 <HAL_RCC_ClockConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002dfe:	f000 f8a1 	bl	8002f44 <Error_Handler>
  }
}
 8002e02:	bf00      	nop
 8002e04:	3750      	adds	r7, #80	@ 0x50
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000

08002e14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <MX_USART2_UART_Init+0x50>)
 8002e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e38:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e4a:	4805      	ldr	r0, [pc, #20]	@ (8002e60 <MX_USART2_UART_Init+0x4c>)
 8002e4c:	f001 f8c2 	bl	8003fd4 <HAL_UART_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e56:	f000 f875 	bl	8002f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20012e9c 	.word	0x20012e9c
 8002e64:	40004400 	.word	0x40004400

08002e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	@ 0x28
 8002e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea2:	4a25      	ldr	r2, [pc, #148]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eaa:	4b23      	ldr	r3, [pc, #140]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a17      	ldr	r2, [pc, #92]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <MX_GPIO_Init+0xd0>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2120      	movs	r1, #32
 8002ef2:	4812      	ldr	r0, [pc, #72]	@ (8002f3c <MX_GPIO_Init+0xd4>)
 8002ef4:	f000 fbbc 	bl	8003670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ef8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002efe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480c      	ldr	r0, [pc, #48]	@ (8002f40 <MX_GPIO_Init+0xd8>)
 8002f10:	f000 fa2a 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002f14:	2320      	movs	r3, #32
 8002f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4804      	ldr	r0, [pc, #16]	@ (8002f3c <MX_GPIO_Init+0xd4>)
 8002f2c:	f000 fa1c 	bl	8003368 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020800 	.word	0x40020800

08002f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f48:	b672      	cpsid	i
}
 8002f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <Error_Handler+0x8>

08002f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f66:	4b0d      	ldr	r3, [pc, #52]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	4b09      	ldr	r3, [pc, #36]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	4a08      	ldr	r2, [pc, #32]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_MspInit+0x4c>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	@ (8003024 <HAL_UART_MspInit+0x84>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12b      	bne.n	800301a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	4a17      	ldr	r2, [pc, #92]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fee:	4b0e      	ldr	r3, [pc, #56]	@ (8003028 <HAL_UART_MspInit+0x88>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300a:	2307      	movs	r3, #7
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	@ (800302c <HAL_UART_MspInit+0x8c>)
 8003016:	f000 f9a7 	bl	8003368 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800301a:	bf00      	nop
 800301c:	3728      	adds	r7, #40	@ 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40004400 	.word	0x40004400
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000

08003030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <NMI_Handler+0x4>

08003038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <HardFault_Handler+0x4>

08003040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <MemManage_Handler+0x4>

08003048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304c:	bf00      	nop
 800304e:	e7fd      	b.n	800304c <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003054:	bf00      	nop
 8003056:	e7fd      	b.n	8003054 <UsageFault_Handler+0x4>

08003058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
	...

08003068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800306c:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <SystemInit+0x20>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <SystemInit+0x20>)
 8003074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800308c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003090:	f7ff ffea 	bl	8003068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003094:	480c      	ldr	r0, [pc, #48]	@ (80030c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003096:	490d      	ldr	r1, [pc, #52]	@ (80030cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003098:	4a0d      	ldr	r2, [pc, #52]	@ (80030d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800309a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800309c:	e002      	b.n	80030a4 <LoopCopyDataInit>

0800309e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800309e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a2:	3304      	adds	r3, #4

080030a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030a8:	d3f9      	bcc.n	800309e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030aa:	4a0a      	ldr	r2, [pc, #40]	@ (80030d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030ac:	4c0a      	ldr	r4, [pc, #40]	@ (80030d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030b0:	e001      	b.n	80030b6 <LoopFillZerobss>

080030b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030b4:	3204      	adds	r2, #4

080030b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030b8:	d3fb      	bcc.n	80030b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80030ba:	f001 fb9f 	bl	80047fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030be:	f7ff fe0b 	bl	8002cd8 <main>
  bx  lr    
 80030c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80030d0:	080048f8 	.word	0x080048f8
  ldr r2, =_sbss
 80030d4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80030d8:	200135b0 	.word	0x200135b0

080030dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030dc:	e7fe      	b.n	80030dc <ADC_IRQHandler>
	...

080030e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_Init+0x40>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_Init+0x40>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_Init+0x40>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <HAL_Init+0x40>)
 80030f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a07      	ldr	r2, [pc, #28]	@ (8003120 <HAL_Init+0x40>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003106:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003108:	2003      	movs	r0, #3
 800310a:	f000 f8f9 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800310e:	2000      	movs	r0, #0
 8003110:	f000 f808 	bl	8003124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003114:	f7ff ff1c 	bl	8002f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00

08003124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800312c:	4b12      	ldr	r3, [pc, #72]	@ (8003178 <HAL_InitTick+0x54>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b12      	ldr	r3, [pc, #72]	@ (800317c <HAL_InitTick+0x58>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	4619      	mov	r1, r3
 8003136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800313a:	fbb3 f3f1 	udiv	r3, r3, r1
 800313e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f903 	bl	800334e <HAL_SYSTICK_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00e      	b.n	8003170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d80a      	bhi.n	800316e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 f8d9 	bl	8003316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003164:	4a06      	ldr	r2, [pc, #24]	@ (8003180 <HAL_InitTick+0x5c>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	20000010 	.word	0x20000010
 800317c:	20000018 	.word	0x20000018
 8003180:	20000014 	.word	0x20000014

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200135ac 	.word	0x200135ac

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	@ (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	@ (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	@ 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
         );
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032cc:	d301      	bcc.n	80032d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <SysTick_Config+0x40>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032da:	210f      	movs	r1, #15
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f7ff ff8e 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <SysTick_Config+0x40>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <SysTick_Config+0x40>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff47 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003328:	f7ff ff5c 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 800332c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f7ff ff8e 	bl	8003254 <NVIC_EncodePriority>
 8003338:	4602      	mov	r2, r0
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff5d 	bl	8003200 <__NVIC_SetPriority>
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffb0 	bl	80032bc <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	@ 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e159      	b.n	8003638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003384:	2201      	movs	r2, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	f040 8148 	bne.w	8003632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d005      	beq.n	80033ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d130      	bne.n	800341c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	2203      	movs	r2, #3
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 0201 	and.w	r2, r3, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d017      	beq.n	8003458 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d123      	bne.n	80034ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a2 	beq.w	8003632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b57      	ldr	r3, [pc, #348]	@ (8003650 <HAL_GPIO_Init+0x2e8>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	4a56      	ldr	r2, [pc, #344]	@ (8003650 <HAL_GPIO_Init+0x2e8>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034fe:	4b54      	ldr	r3, [pc, #336]	@ (8003650 <HAL_GPIO_Init+0x2e8>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350a:	4a52      	ldr	r2, [pc, #328]	@ (8003654 <HAL_GPIO_Init+0x2ec>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a49      	ldr	r2, [pc, #292]	@ (8003658 <HAL_GPIO_Init+0x2f0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x202>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a48      	ldr	r2, [pc, #288]	@ (800365c <HAL_GPIO_Init+0x2f4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x1fe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a47      	ldr	r2, [pc, #284]	@ (8003660 <HAL_GPIO_Init+0x2f8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a46      	ldr	r2, [pc, #280]	@ (8003664 <HAL_GPIO_Init+0x2fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x1f6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a45      	ldr	r2, [pc, #276]	@ (8003668 <HAL_GPIO_Init+0x300>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x1f2>
 8003556:	2304      	movs	r3, #4
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355a:	2307      	movs	r3, #7
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x204>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	@ (8003654 <HAL_GPIO_Init+0x2ec>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800358a:	4b38      	ldr	r3, [pc, #224]	@ (800366c <HAL_GPIO_Init+0x304>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ae:	4a2f      	ldr	r2, [pc, #188]	@ (800366c <HAL_GPIO_Init+0x304>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b4:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_GPIO_Init+0x304>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d8:	4a24      	ldr	r2, [pc, #144]	@ (800366c <HAL_GPIO_Init+0x304>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035de:	4b23      	ldr	r3, [pc, #140]	@ (800366c <HAL_GPIO_Init+0x304>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003602:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_GPIO_Init+0x304>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_GPIO_Init+0x304>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362c:	4a0f      	ldr	r2, [pc, #60]	@ (800366c <HAL_GPIO_Init+0x304>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f aea2 	bls.w	8003384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	40013800 	.word	0x40013800
 8003658:	40020000 	.word	0x40020000
 800365c:	40020400 	.word	0x40020400
 8003660:	40020800 	.word	0x40020800
 8003664:	40020c00 	.word	0x40020c00
 8003668:	40021000 	.word	0x40021000
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
 800367c:	4613      	mov	r3, r2
 800367e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003680:	787b      	ldrb	r3, [r7, #1]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800368c:	e003      	b.n	8003696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	041a      	lsls	r2, r3, #16
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e267      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d075      	beq.n	80037ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036c2:	4b88      	ldr	r3, [pc, #544]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ce:	4b85      	ldr	r3, [pc, #532]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036da:	4b82      	ldr	r3, [pc, #520]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036e6:	d10b      	bne.n	8003700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	4b7e      	ldr	r3, [pc, #504]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d05b      	beq.n	80037ac <HAL_RCC_OscConfig+0x108>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d157      	bne.n	80037ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e242      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x74>
 800370a:	4b76      	ldr	r3, [pc, #472]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a75      	ldr	r2, [pc, #468]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e01d      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x98>
 8003722:	4b70      	ldr	r3, [pc, #448]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6f      	ldr	r2, [pc, #444]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0xb0>
 800373c:	4b69      	ldr	r3, [pc, #420]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a68      	ldr	r2, [pc, #416]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4b66      	ldr	r3, [pc, #408]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a65      	ldr	r2, [pc, #404]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 800374e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d013      	beq.n	8003784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7ff fd12 	bl	8003184 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7ff fd0e 	bl	8003184 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e207      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	4b5b      	ldr	r3, [pc, #364]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0xc0>
 8003782:	e014      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7ff fcfe 	bl	8003184 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800378c:	f7ff fcfa 	bl	8003184 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	@ 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1f3      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	4b51      	ldr	r3, [pc, #324]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0xe8>
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d063      	beq.n	8003882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ba:	4b4a      	ldr	r3, [pc, #296]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037c6:	4b47      	ldr	r3, [pc, #284]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d11c      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037d2:	4b44      	ldr	r3, [pc, #272]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d116      	bne.n	800380c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037de:	4b41      	ldr	r3, [pc, #260]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e1c7      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f6:	4b3b      	ldr	r3, [pc, #236]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4937      	ldr	r1, [pc, #220]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	e03a      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003814:	4b34      	ldr	r3, [pc, #208]	@ (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7ff fcb3 	bl	8003184 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003822:	f7ff fcaf 	bl	8003184 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e1a8      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003840:	4b28      	ldr	r3, [pc, #160]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4925      	ldr	r1, [pc, #148]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]
 8003854:	e015      	b.n	8003882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003856:	4b24      	ldr	r3, [pc, #144]	@ (80038e8 <HAL_RCC_OscConfig+0x244>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7ff fc92 	bl	8003184 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003864:	f7ff fc8e 	bl	8003184 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e187      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	4b1b      	ldr	r3, [pc, #108]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d036      	beq.n	80038fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d016      	beq.n	80038c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <HAL_RCC_OscConfig+0x248>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7ff fc72 	bl	8003184 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7ff fc6e 	bl	8003184 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e167      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_OscConfig+0x240>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x200>
 80038c2:	e01b      	b.n	80038fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c4:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_RCC_OscConfig+0x248>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7ff fc5b 	bl	8003184 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	e00e      	b.n	80038f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7ff fc57 	bl	8003184 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d907      	bls.n	80038f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e150      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 80038e4:	40023800 	.word	0x40023800
 80038e8:	42470000 	.word	0x42470000
 80038ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b88      	ldr	r3, [pc, #544]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 8097 	beq.w	8003a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b81      	ldr	r3, [pc, #516]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10f      	bne.n	800393a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
 800391e:	4b7d      	ldr	r3, [pc, #500]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003922:	4a7c      	ldr	r2, [pc, #496]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	@ 0x40
 800392a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393a:	4b77      	ldr	r3, [pc, #476]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003946:	4b74      	ldr	r3, [pc, #464]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a73      	ldr	r2, [pc, #460]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7ff fc17 	bl	8003184 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7ff fc13 	bl	8003184 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e10c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b18 <HAL_RCC_OscConfig+0x474>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d106      	bne.n	800398e <HAL_RCC_OscConfig+0x2ea>
 8003980:	4b64      	ldr	r3, [pc, #400]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003984:	4a63      	ldr	r2, [pc, #396]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	6713      	str	r3, [r2, #112]	@ 0x70
 800398c:	e01c      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b05      	cmp	r3, #5
 8003994:	d10c      	bne.n	80039b0 <HAL_RCC_OscConfig+0x30c>
 8003996:	4b5f      	ldr	r3, [pc, #380]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800399a:	4a5e      	ldr	r2, [pc, #376]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ae:	e00b      	b.n	80039c8 <HAL_RCC_OscConfig+0x324>
 80039b0:	4b58      	ldr	r3, [pc, #352]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b4:	4a57      	ldr	r2, [pc, #348]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80039bc:	4b55      	ldr	r3, [pc, #340]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c0:	4a54      	ldr	r2, [pc, #336]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7ff fbd8 	bl	8003184 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7ff fbd4 	bl	8003184 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0cb      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ee:	4b49      	ldr	r3, [pc, #292]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0ee      	beq.n	80039d8 <HAL_RCC_OscConfig+0x334>
 80039fa:	e014      	b.n	8003a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7ff fbc2 	bl	8003184 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7ff fbbe 	bl	8003184 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0b5      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1ee      	bne.n	8003a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a2c:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	4a38      	ldr	r2, [pc, #224]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 80a1 	beq.w	8003b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a42:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d05c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d141      	bne.n	8003ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7ff fb92 	bl	8003184 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7ff fb8e 	bl	8003184 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e087      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a76:	4b27      	ldr	r3, [pc, #156]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69da      	ldr	r2, [r3, #28]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	491b      	ldr	r1, [pc, #108]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aac:	4b1b      	ldr	r3, [pc, #108]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab2:	f7ff fb67 	bl	8003184 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aba:	f7ff fb63 	bl	8003184 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e05c      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x416>
 8003ad8:	e054      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ada:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <HAL_RCC_OscConfig+0x478>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7ff fb50 	bl	8003184 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7ff fb4c 	bl	8003184 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e045      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_OscConfig+0x470>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x444>
 8003b06:	e03d      	b.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e038      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x4ec>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d028      	beq.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d121      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11a      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b50:	4013      	ands	r3, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d111      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0cc      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b68      	ldr	r3, [pc, #416]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d90c      	bls.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b65      	ldr	r3, [pc, #404]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b63      	ldr	r3, [pc, #396]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d001      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0b8      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003be8:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a58      	ldr	r2, [pc, #352]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c00:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a52      	ldr	r2, [pc, #328]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c0c:	4b50      	ldr	r3, [pc, #320]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	494d      	ldr	r1, [pc, #308]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d044      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d119      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d003      	beq.n	8003c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e06f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e067      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c72:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 0203 	bic.w	r2, r3, #3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4934      	ldr	r1, [pc, #208]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c84:	f7ff fa7e 	bl	8003184 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8c:	f7ff fa7a 	bl	8003184 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e04f      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 020c 	and.w	r2, r3, #12
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d1eb      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d20c      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b22      	ldr	r3, [pc, #136]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b20      	ldr	r3, [pc, #128]	@ (8003d4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e032      	b.n	8003d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ce8:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4916      	ldr	r1, [pc, #88]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d06:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	490e      	ldr	r1, [pc, #56]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d1a:	f000 f821 	bl	8003d60 <HAL_RCC_GetSysClockFreq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	091b      	lsrs	r3, r3, #4
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	490a      	ldr	r1, [pc, #40]	@ (8003d54 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2c:	5ccb      	ldrb	r3, [r1, r3]
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	4a09      	ldr	r2, [pc, #36]	@ (8003d58 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff f9f2 	bl	8003124 <HAL_InitTick>

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023c00 	.word	0x40023c00
 8003d50:	40023800 	.word	0x40023800
 8003d54:	080048d0 	.word	0x080048d0
 8003d58:	20000010 	.word	0x20000010
 8003d5c:	20000014 	.word	0x20000014

08003d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d64:	b094      	sub	sp, #80	@ 0x50
 8003d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d78:	4b79      	ldr	r3, [pc, #484]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d00d      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0x40>
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	f200 80e1 	bhi.w	8003f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x34>
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d92:	e0db      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b73      	ldr	r3, [pc, #460]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d98:	e0db      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d9a:	4b73      	ldr	r3, [pc, #460]	@ (8003f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d9e:	e0d8      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003da0:	4b6f      	ldr	r3, [pc, #444]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003daa:	4b6d      	ldr	r3, [pc, #436]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d063      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003db6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	099b      	lsrs	r3, r3, #6
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dca:	2300      	movs	r3, #0
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	f04f 0000 	mov.w	r0, #0
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	0159      	lsls	r1, r3, #5
 8003de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de4:	0150      	lsls	r0, r2, #5
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4621      	mov	r1, r4
 8003dec:	1a51      	subs	r1, r2, r1
 8003dee:	6139      	str	r1, [r7, #16]
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb63 0301 	sbc.w	r3, r3, r1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e04:	4659      	mov	r1, fp
 8003e06:	018b      	lsls	r3, r1, #6
 8003e08:	4651      	mov	r1, sl
 8003e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0e:	4651      	mov	r1, sl
 8003e10:	018a      	lsls	r2, r1, #6
 8003e12:	4651      	mov	r1, sl
 8003e14:	ebb2 0801 	subs.w	r8, r2, r1
 8003e18:	4659      	mov	r1, fp
 8003e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	eb18 0303 	adds.w	r3, r8, r3
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	462b      	mov	r3, r5
 8003e40:	eb49 0303 	adc.w	r3, r9, r3
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e52:	4629      	mov	r1, r5
 8003e54:	024b      	lsls	r3, r1, #9
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	024a      	lsls	r2, r1, #9
 8003e60:	4610      	mov	r0, r2
 8003e62:	4619      	mov	r1, r3
 8003e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e66:	2200      	movs	r2, #0
 8003e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e70:	f7fc f9be 	bl	80001f0 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4613      	mov	r3, r2
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	e058      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b38      	ldr	r3, [pc, #224]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	2200      	movs	r2, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	4611      	mov	r1, r2
 8003e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	f04f 0000 	mov.w	r0, #0
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	0159      	lsls	r1, r3, #5
 8003ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eaa:	0150      	lsls	r0, r2, #5
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	603b      	str	r3, [r7, #0]
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	eb45 0303 	adc.w	r3, r5, r3
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f06:	4629      	mov	r1, r5
 8003f08:	028b      	lsls	r3, r1, #10
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f10:	4621      	mov	r1, r4
 8003f12:	028a      	lsls	r2, r1, #10
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	61fa      	str	r2, [r7, #28]
 8003f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f24:	f7fc f964 	bl	80001f0 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f30:	4b0b      	ldr	r3, [pc, #44]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f4a:	e002      	b.n	8003f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f4c:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3750      	adds	r7, #80	@ 0x50
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	00f42400 	.word	0x00f42400
 8003f68:	007a1200 	.word	0x007a1200

08003f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000010 	.word	0x20000010

08003f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f88:	f7ff fff0 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0a9b      	lsrs	r3, r3, #10
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	080048e0 	.word	0x080048e0

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fb0:	f7ff ffdc 	bl	8003f6c <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0b5b      	lsrs	r3, r3, #13
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4903      	ldr	r1, [pc, #12]	@ (8003fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	080048e0 	.word	0x080048e0

08003fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e042      	b.n	800406c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fe ffd0 	bl	8002fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	@ 0x24
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f973 	bl	8004304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800402c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800403c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800404c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	@ 0x28
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b20      	cmp	r3, #32
 8004092:	d175      	bne.n	8004180 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_UART_Transmit+0x2c>
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e06e      	b.n	8004182 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2221      	movs	r2, #33	@ 0x21
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b2:	f7ff f867 	bl	8003184 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040cc:	d108      	bne.n	80040e0 <HAL_UART_Transmit+0x6c>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d104      	bne.n	80040e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	e003      	b.n	80040e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040e8:	e02e      	b.n	8004148 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2200      	movs	r2, #0
 80040f2:	2180      	movs	r1, #128	@ 0x80
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f848 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e03a      	b.n	8004182 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3302      	adds	r3, #2
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e007      	b.n	800413a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	3301      	adds	r3, #1
 8004138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1cb      	bne.n	80040ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	2140      	movs	r1, #64	@ 0x40
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f814 	bl	800418a <UART_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419a:	e03b      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d037      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a4:	f7fe ffee 	bl	8003184 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d302      	bcc.n	80041ba <UART_WaitOnFlagUntilTimeout+0x30>
 80041b4:	6a3b      	ldr	r3, [r7, #32]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e03a      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d023      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b80      	cmp	r3, #128	@ 0x80
 80041d0:	d020      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b40      	cmp	r3, #64	@ 0x40
 80041d6:	d01d      	beq.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d116      	bne.n	8004214 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f81d 	bl	800423c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2208      	movs	r2, #8
 8004206:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e00f      	b.n	8004234 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4013      	ands	r3, r2
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	429a      	cmp	r2, r3
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	79fb      	ldrb	r3, [r7, #7]
 800422e:	429a      	cmp	r2, r3
 8004230:	d0b4      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b095      	sub	sp, #84	@ 0x54
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800425a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004264:	643a      	str	r2, [r7, #64]	@ 0x40
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800426a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	61fb      	str	r3, [r7, #28]
   return(result);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800429e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e5      	bne.n	8004278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d119      	bne.n	80042e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042d4:	61ba      	str	r2, [r7, #24]
 80042d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	613b      	str	r3, [r7, #16]
   return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042f6:	bf00      	nop
 80042f8:	3754      	adds	r7, #84	@ 0x54
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b0c0      	sub	sp, #256	@ 0x100
 800430a:	af00      	add	r7, sp, #0
 800430c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	68d9      	ldr	r1, [r3, #12]
 8004322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	ea40 0301 	orr.w	r3, r0, r1
 800432c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	431a      	orrs	r2, r3
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	431a      	orrs	r2, r3
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800435c:	f021 010c 	bic.w	r1, r1, #12
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800436a:	430b      	orrs	r3, r1
 800436c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	6999      	ldr	r1, [r3, #24]
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	ea40 0301 	orr.w	r3, r0, r1
 800438a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b8f      	ldr	r3, [pc, #572]	@ (80045d0 <UART_SetConfig+0x2cc>)
 8004394:	429a      	cmp	r2, r3
 8004396:	d005      	beq.n	80043a4 <UART_SetConfig+0xa0>
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b8d      	ldr	r3, [pc, #564]	@ (80045d4 <UART_SetConfig+0x2d0>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d104      	bne.n	80043ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043a4:	f7ff fe02 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 80043a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043ac:	e003      	b.n	80043b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ae:	f7ff fde9 	bl	8003f84 <HAL_RCC_GetPCLK1Freq>
 80043b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c0:	f040 810c 	bne.w	80045dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c8:	2200      	movs	r2, #0
 80043ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043d6:	4622      	mov	r2, r4
 80043d8:	462b      	mov	r3, r5
 80043da:	1891      	adds	r1, r2, r2
 80043dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043de:	415b      	adcs	r3, r3
 80043e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043e6:	4621      	mov	r1, r4
 80043e8:	eb12 0801 	adds.w	r8, r2, r1
 80043ec:	4629      	mov	r1, r5
 80043ee:	eb43 0901 	adc.w	r9, r3, r1
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004406:	4690      	mov	r8, r2
 8004408:	4699      	mov	r9, r3
 800440a:	4623      	mov	r3, r4
 800440c:	eb18 0303 	adds.w	r3, r8, r3
 8004410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004414:	462b      	mov	r3, r5
 8004416:	eb49 0303 	adc.w	r3, r9, r3
 800441a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800442a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800442e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004432:	460b      	mov	r3, r1
 8004434:	18db      	adds	r3, r3, r3
 8004436:	653b      	str	r3, [r7, #80]	@ 0x50
 8004438:	4613      	mov	r3, r2
 800443a:	eb42 0303 	adc.w	r3, r2, r3
 800443e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004448:	f7fb fed2 	bl	80001f0 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4b61      	ldr	r3, [pc, #388]	@ (80045d8 <UART_SetConfig+0x2d4>)
 8004452:	fba3 2302 	umull	r2, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	011c      	lsls	r4, r3, #4
 800445a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800445e:	2200      	movs	r2, #0
 8004460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004464:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800446c:	4642      	mov	r2, r8
 800446e:	464b      	mov	r3, r9
 8004470:	1891      	adds	r1, r2, r2
 8004472:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004474:	415b      	adcs	r3, r3
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800447c:	4641      	mov	r1, r8
 800447e:	eb12 0a01 	adds.w	sl, r2, r1
 8004482:	4649      	mov	r1, r9
 8004484:	eb43 0b01 	adc.w	fp, r3, r1
 8004488:	f04f 0200 	mov.w	r2, #0
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449c:	4692      	mov	sl, r2
 800449e:	469b      	mov	fp, r3
 80044a0:	4643      	mov	r3, r8
 80044a2:	eb1a 0303 	adds.w	r3, sl, r3
 80044a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb4b 0303 	adc.w	r3, fp, r3
 80044b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044c8:	460b      	mov	r3, r1
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ce:	4613      	mov	r3, r2
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044de:	f7fb fe87 	bl	80001f0 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4611      	mov	r1, r2
 80044e8:	4b3b      	ldr	r3, [pc, #236]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80044ea:	fba3 2301 	umull	r2, r3, r3, r1
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2264      	movs	r2, #100	@ 0x64
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044fe:	4b36      	ldr	r3, [pc, #216]	@ (80045d8 <UART_SetConfig+0x2d4>)
 8004500:	fba3 2302 	umull	r2, r3, r3, r2
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800450c:	441c      	add	r4, r3
 800450e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004512:	2200      	movs	r2, #0
 8004514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004518:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800451c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	1891      	adds	r1, r2, r2
 8004526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004528:	415b      	adcs	r3, r3
 800452a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800452c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004530:	4641      	mov	r1, r8
 8004532:	1851      	adds	r1, r2, r1
 8004534:	6339      	str	r1, [r7, #48]	@ 0x30
 8004536:	4649      	mov	r1, r9
 8004538:	414b      	adcs	r3, r1
 800453a:	637b      	str	r3, [r7, #52]	@ 0x34
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004548:	4659      	mov	r1, fp
 800454a:	00cb      	lsls	r3, r1, #3
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004552:	4651      	mov	r1, sl
 8004554:	00ca      	lsls	r2, r1, #3
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	4603      	mov	r3, r0
 800455c:	4642      	mov	r2, r8
 800455e:	189b      	adds	r3, r3, r2
 8004560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004564:	464b      	mov	r3, r9
 8004566:	460a      	mov	r2, r1
 8004568:	eb42 0303 	adc.w	r3, r2, r3
 800456c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800457c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004584:	460b      	mov	r3, r1
 8004586:	18db      	adds	r3, r3, r3
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800458a:	4613      	mov	r3, r2
 800458c:	eb42 0303 	adc.w	r3, r2, r3
 8004590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800459a:	f7fb fe29 	bl	80001f0 <__aeabi_uldivmod>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80045a4:	fba3 1302 	umull	r1, r3, r3, r2
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	2164      	movs	r1, #100	@ 0x64
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	3332      	adds	r3, #50	@ 0x32
 80045b6:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <UART_SetConfig+0x2d4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	f003 0207 	and.w	r2, r3, #7
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4422      	add	r2, r4
 80045ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045cc:	e106      	b.n	80047dc <UART_SetConfig+0x4d8>
 80045ce:	bf00      	nop
 80045d0:	40011000 	.word	0x40011000
 80045d4:	40011400 	.word	0x40011400
 80045d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ee:	4642      	mov	r2, r8
 80045f0:	464b      	mov	r3, r9
 80045f2:	1891      	adds	r1, r2, r2
 80045f4:	6239      	str	r1, [r7, #32]
 80045f6:	415b      	adcs	r3, r3
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045fe:	4641      	mov	r1, r8
 8004600:	1854      	adds	r4, r2, r1
 8004602:	4649      	mov	r1, r9
 8004604:	eb43 0501 	adc.w	r5, r3, r1
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	f04f 0300 	mov.w	r3, #0
 8004610:	00eb      	lsls	r3, r5, #3
 8004612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004616:	00e2      	lsls	r2, r4, #3
 8004618:	4614      	mov	r4, r2
 800461a:	461d      	mov	r5, r3
 800461c:	4643      	mov	r3, r8
 800461e:	18e3      	adds	r3, r4, r3
 8004620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004624:	464b      	mov	r3, r9
 8004626:	eb45 0303 	adc.w	r3, r5, r3
 800462a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800463a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800464a:	4629      	mov	r1, r5
 800464c:	008b      	lsls	r3, r1, #2
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004654:	4621      	mov	r1, r4
 8004656:	008a      	lsls	r2, r1, #2
 8004658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800465c:	f7fb fdc8 	bl	80001f0 <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4b60      	ldr	r3, [pc, #384]	@ (80047e8 <UART_SetConfig+0x4e4>)
 8004666:	fba3 2302 	umull	r2, r3, r3, r2
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	011c      	lsls	r4, r3, #4
 800466e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004672:	2200      	movs	r2, #0
 8004674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800467c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	1891      	adds	r1, r2, r2
 8004686:	61b9      	str	r1, [r7, #24]
 8004688:	415b      	adcs	r3, r3
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004690:	4641      	mov	r1, r8
 8004692:	1851      	adds	r1, r2, r1
 8004694:	6139      	str	r1, [r7, #16]
 8004696:	4649      	mov	r1, r9
 8004698:	414b      	adcs	r3, r1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a8:	4659      	mov	r1, fp
 80046aa:	00cb      	lsls	r3, r1, #3
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b2:	4651      	mov	r1, sl
 80046b4:	00ca      	lsls	r2, r1, #3
 80046b6:	4610      	mov	r0, r2
 80046b8:	4619      	mov	r1, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	4642      	mov	r2, r8
 80046be:	189b      	adds	r3, r3, r2
 80046c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046c4:	464b      	mov	r3, r9
 80046c6:	460a      	mov	r2, r1
 80046c8:	eb42 0303 	adc.w	r3, r2, r3
 80046cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046e8:	4649      	mov	r1, r9
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f2:	4641      	mov	r1, r8
 80046f4:	008a      	lsls	r2, r1, #2
 80046f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046fa:	f7fb fd79 	bl	80001f0 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4611      	mov	r1, r2
 8004704:	4b38      	ldr	r3, [pc, #224]	@ (80047e8 <UART_SetConfig+0x4e4>)
 8004706:	fba3 2301 	umull	r2, r3, r3, r1
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	2264      	movs	r2, #100	@ 0x64
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	1acb      	subs	r3, r1, r3
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	3332      	adds	r3, #50	@ 0x32
 8004718:	4a33      	ldr	r2, [pc, #204]	@ (80047e8 <UART_SetConfig+0x4e4>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004724:	441c      	add	r4, r3
 8004726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800472a:	2200      	movs	r2, #0
 800472c:	673b      	str	r3, [r7, #112]	@ 0x70
 800472e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004734:	4642      	mov	r2, r8
 8004736:	464b      	mov	r3, r9
 8004738:	1891      	adds	r1, r2, r2
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	415b      	adcs	r3, r3
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004744:	4641      	mov	r1, r8
 8004746:	1851      	adds	r1, r2, r1
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	4649      	mov	r1, r9
 800474c:	414b      	adcs	r3, r1
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800475c:	4659      	mov	r1, fp
 800475e:	00cb      	lsls	r3, r1, #3
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004766:	4651      	mov	r1, sl
 8004768:	00ca      	lsls	r2, r1, #3
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	189b      	adds	r3, r3, r2
 8004774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004776:	464b      	mov	r3, r9
 8004778:	460a      	mov	r2, r1
 800477a:	eb42 0303 	adc.w	r3, r2, r3
 800477e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	663b      	str	r3, [r7, #96]	@ 0x60
 800478a:	667a      	str	r2, [r7, #100]	@ 0x64
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004798:	4649      	mov	r1, r9
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	4641      	mov	r1, r8
 800479e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a2:	4641      	mov	r1, r8
 80047a4:	008a      	lsls	r2, r1, #2
 80047a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047aa:	f7fb fd21 	bl	80001f0 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <UART_SetConfig+0x4e4>)
 80047b4:	fba3 1302 	umull	r1, r3, r3, r2
 80047b8:	095b      	lsrs	r3, r3, #5
 80047ba:	2164      	movs	r1, #100	@ 0x64
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	3332      	adds	r3, #50	@ 0x32
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <UART_SetConfig+0x4e4>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4422      	add	r2, r4
 80047da:	609a      	str	r2, [r3, #8]
}
 80047dc:	bf00      	nop
 80047de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047e2:	46bd      	mov	sp, r7
 80047e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e8:	51eb851f 	.word	0x51eb851f

080047ec <memset>:
 80047ec:	4402      	add	r2, r0
 80047ee:	4603      	mov	r3, r0
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d100      	bne.n	80047f6 <memset+0xa>
 80047f4:	4770      	bx	lr
 80047f6:	f803 1b01 	strb.w	r1, [r3], #1
 80047fa:	e7f9      	b.n	80047f0 <memset+0x4>

080047fc <__libc_init_array>:
 80047fc:	b570      	push	{r4, r5, r6, lr}
 80047fe:	4d0d      	ldr	r5, [pc, #52]	@ (8004834 <__libc_init_array+0x38>)
 8004800:	4c0d      	ldr	r4, [pc, #52]	@ (8004838 <__libc_init_array+0x3c>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	2600      	movs	r6, #0
 8004808:	42a6      	cmp	r6, r4
 800480a:	d109      	bne.n	8004820 <__libc_init_array+0x24>
 800480c:	4d0b      	ldr	r5, [pc, #44]	@ (800483c <__libc_init_array+0x40>)
 800480e:	4c0c      	ldr	r4, [pc, #48]	@ (8004840 <__libc_init_array+0x44>)
 8004810:	f000 f826 	bl	8004860 <_init>
 8004814:	1b64      	subs	r4, r4, r5
 8004816:	10a4      	asrs	r4, r4, #2
 8004818:	2600      	movs	r6, #0
 800481a:	42a6      	cmp	r6, r4
 800481c:	d105      	bne.n	800482a <__libc_init_array+0x2e>
 800481e:	bd70      	pop	{r4, r5, r6, pc}
 8004820:	f855 3b04 	ldr.w	r3, [r5], #4
 8004824:	4798      	blx	r3
 8004826:	3601      	adds	r6, #1
 8004828:	e7ee      	b.n	8004808 <__libc_init_array+0xc>
 800482a:	f855 3b04 	ldr.w	r3, [r5], #4
 800482e:	4798      	blx	r3
 8004830:	3601      	adds	r6, #1
 8004832:	e7f2      	b.n	800481a <__libc_init_array+0x1e>
 8004834:	080048f0 	.word	0x080048f0
 8004838:	080048f0 	.word	0x080048f0
 800483c:	080048f0 	.word	0x080048f0
 8004840:	080048f4 	.word	0x080048f4

08004844 <memcpy>:
 8004844:	440a      	add	r2, r1
 8004846:	4291      	cmp	r1, r2
 8004848:	f100 33ff 	add.w	r3, r0, #4294967295
 800484c:	d100      	bne.n	8004850 <memcpy+0xc>
 800484e:	4770      	bx	lr
 8004850:	b510      	push	{r4, lr}
 8004852:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800485a:	4291      	cmp	r1, r2
 800485c:	d1f9      	bne.n	8004852 <memcpy+0xe>
 800485e:	bd10      	pop	{r4, pc}

08004860 <_init>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr

0800486c <_fini>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr
